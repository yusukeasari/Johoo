// Generated by CoffeeScript 1.6.2
/* 外部設定予定 ここから
*/


(function() {
  var Browser, ClickOnlyButton, ControlPanel, ControlPanelModel, DeleteValueButton, Marker, PhotomosaicViewer, Point, Popup, PostPanel, Pyramid, SEARCH_API, SModel, SearchPanel, SearchResult, Shadow, SmallMap, TIMELINE_API, Tile, TileView, Tiles, Timeline, TimelineChild, TimelineChildView, Utility, arrZoomSizeX, arrZoomSizeY, commentZoom, i, minBlockSize, minZoom, motifHeight, motifWidth, nowZoom, pinchTrigger, pinchTriggerArray, prevZoom, tileHeight, tileImageDir, tileImageExtension, tileWidth, tlImageWidth, x, zoomImageDir, zoomSize, _i, _len, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  tileWidth = 256;

  tileHeight = 256;

  commentZoom = true;

  motifWidth = 86;

  motifHeight = 58;

  SEARCH_API = 'swfData/search_sp.php';

  TIMELINE_API = 'swfData/search_sp.php';

  tileImageDir = 'http://akkinya.pitcom.jp/splitedge/blockimg/pituser/akkinya/web/';

  zoomImageDir = 'swfData/blockimg/';

  tileImageExtension = '.jpg';

  arrZoomSizeX = [0, 4, 8, 16, 32, 64, 128, 256, 256];

  arrZoomSizeY = [0, 4, 8, 16, 32, 64, 128, 256, 256];

  /* 外部設定予定 ここまで
  */


  /* 以下原則変更不要
  */


  pinchTrigger = 15;

  minBlockSize = 1;

  minZoom = 1;

  tlImageWidth = 80;

  nowZoom = minZoom;

  prevZoom = minZoom;

  pinchTriggerArray = [];

  zoomSize = [];

  i = 0;

  for (_i = 0, _len = arrZoomSizeX.length; _i < _len; _i++) {
    x = arrZoomSizeX[_i];
    zoomSize.push([motifWidth * minBlockSize * arrZoomSizeX[i], motifHeight * minBlockSize * arrZoomSizeY[i]]);
    i++;
  }

  $(function() {
    var pmviewer, z, _j, _len1;

    i = 1;
    for (_j = 0, _len1 = arrZoomSizeX.length; _j < _len1; _j++) {
      z = arrZoomSizeX[_j];
      pinchTriggerArray.push(pinchTrigger * i);
      i++;
    }
    return pmviewer = new PhotomosaicViewer;
  });

  /**
   * Class PhotomosaicViewer メインクラス
   * 表示別にクラスを分けるようにすること
  */


  PhotomosaicViewer = (function(_super) {
    __extends(PhotomosaicViewer, _super);

    function PhotomosaicViewer() {
      this.setup = __bind(this.setup, this);
      this.onOrient = __bind(this.onOrient, this);
      this.initialize = __bind(this.initialize, this);      _ref = PhotomosaicViewer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PhotomosaicViewer.prototype.el = '#Johoo';

    PhotomosaicViewer.prototype.initialize = function() {
      var css_href;

      _.bindAll(this);
      this.uniBrowse = new Browser;
      css_href = 'css/johoo_' + Browser.device + '.css';
      $('<link>').attr('href', css_href).attr('rel', 'stylesheet').load().appendTo($('head'));
      return this.setup();
    };

    PhotomosaicViewer.prototype.onOrient = function() {
      Shadow.setSize();
      this.popup.resize();
      return $(this.el).show();
    };

    PhotomosaicViewer.prototype.setup = function() {
      var _this = this;

      this.smodel = new SModel;
      this.shadow = new Shadow;
      this.pyramid = new Pyramid;
      this.popup = new Popup;
      this.searchPanel = new SearchPanel;
      this.postPanel = new PostPanel;
      this.controlPanel = new ControlPanel;
      this.marker = new Marker;
      $(window).bind("orientationchange", function() {
        $(_this.el).hide();
        return setTimeout(function() {
          Browser.setup();
          return _this.onOrient();
        }, 1000);
      });
      this.pyramid.bind('openPopupFromPoint', function(p) {
        _this.popup.openPopupFromPoint(p);
        _this.marker.setResult(p);
        return _this.marker.render();
      });
      this.pyramid.bind('marker', function() {
        return _this.marker.render();
      });
      this.searchPanel.bind('startSearch', function() {
        return _this.marker.clear();
      });
      this.searchPanel.bind('onclicktimeline', function(d) {
        _this.searchPanel.hide();
        Pyramid.show();
        ControlPanel.show();
        nowZoom = 5;
        prevZoom = 4;
        _this.marker.setResult(d);
        return _this.pyramid.moveToNum(d);
      });
      this.searchPanel.bind('backtomain', function() {
        _this.searchPanel.hide();
        Pyramid.show();
        return ControlPanel.show();
      });
      this.pyramid.bind('moving', function(c) {});
      this.controlPanel.bind('change', function(h) {
        return _this.pyramid.update(h);
      });
      this.controlPanel.bind('onclickhomebutton', function() {
        nowZoom = 1;
        prevZoom = 2;
        _this.pyramid.update();
        _this.pyramid.pyramidSetPositionToCenter();
        return setTimeout(function() {
          return _this.pyramid.update();
        }, 100);
      });
      this.controlPanel.bind('showSearchPanel', function() {
        _this.searchPanel.show();
        Pyramid.hide();
        return ControlPanel.hide();
      });
      this.controlPanel.bind('showPostPanel', function() {
        _this.searchPanel.hide();
        _this.postPanel.show();
        Pyramid.hide();
        return ControlPanel.hide();
      });
      Browser.setup();
      this.onOrient();
      return this.controlPanel.trigger('onclickhomebutton');
    };

    return PhotomosaicViewer;

  })(Backbone.View);

  SmallMap = (function(_super) {
    __extends(SmallMap, _super);

    function SmallMap() {
      this.setCoords = __bind(this.setCoords, this);
      this.setup = __bind(this.setup, this);
      this.initialize = __bind(this.initialize, this);      _ref1 = SmallMap.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SmallMap.prototype.el = '';

    SmallMap.prototype.cursor = '#smallMapCursor';

    SmallMap.prototype.image = '#smallMapImage';

    SmallMap.prototype.m = 4;

    SmallMap.prototype.dm = 1;

    SmallMap.prototype.initialize = function(_el, _url) {
      this.el = _el;
      this.dm = Browser.device === 'smartphone' ? 1 : 2;
      this.m = this.m / this.dm;
      $(this.el).css({
        'overflow': 'hidden',
        'background-image': "url('" + _url + "')",
        'background-repeat': 'no-repeat',
        'background-size': zoomSize[1][0] / this.m + ' ' + zoomSize[1][1] / this.m
      });
      $('<div>').attr('id', 'smallMapCursor').appendTo($(this.el));
      return this.setup();
    };

    SmallMap.prototype.setup = function() {
      this.defaultRatio = [this.m / zoomSize[1][0], this.m / zoomSize[1][1]];
      $(this.cursor).css({
        width: Browser.width / this.m,
        position: 'relative',
        height: Browser.height / this.m,
        border: 'solid 1px #FF0000',
        zIndex: 40,
        left: 20,
        top: 50
      });
      $(this.el).css({
        top: Browser.height - (zoomSize[1][1] / this.m) - 10,
        width: zoomSize[1][0] / this.m,
        height: zoomSize[1][1] / this.m
      });
      return this.setCoords([Browser.width / 2 - zoomSize[nowZoom][0] / 2, Browser.height / 2 - zoomSize[nowZoom][1] / 2]);
    };

    SmallMap.prototype.setCoords = function(c) {
      return $(this.cursor).css({
        left: (c[0] / (this.m * (zoomSize[nowZoom][0] / zoomSize[1][0]))) * -1,
        top: (c[1] / (this.m * (zoomSize[nowZoom][1] / zoomSize[1][1]))) * -1,
        width: Browser.width / (this.m * (zoomSize[nowZoom][0] / zoomSize[1][0])),
        height: Browser.height / (this.m * (zoomSize[nowZoom][1] / zoomSize[1][1]))
      });
    };

    SmallMap.prototype.hide = function() {
      return $(this.el).hide();
    };

    SmallMap.prototype.show = function() {
      return $(this.el).show();
    };

    return SmallMap;

  })(Backbone.View);

  /**
   * Class SModel 現在はイベント管理のみ
   *
  */


  SModel = (function(_super) {
    __extends(SModel, _super);

    function SModel() {
      this.removeEvent = __bind(this.removeEvent, this);
      this.setEvent = __bind(this.setEvent, this);      _ref2 = SModel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SModel.prototype.setEvent = function(_target, _eventname) {
      var _this = this;

      return this.bind(_eventname, function(_data) {
        return _this.cEvent(_eventname, _data);
      });
    };

    SModel.prototype.removeEvent = function(_e) {
      return this.unbind(_e);
    };

    SModel.prototype.cEvent = function(_event, _data) {
      return this.trigger("" + _event + "R", _data);
    };

    return SModel;

  })(Backbone.Model);

  PostPanel = (function(_super) {
    __extends(PostPanel, _super);

    function PostPanel() {
      _ref3 = PostPanel.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    PostPanel.prototype.el = '#PostPanel';

    PostPanel.prototype.initialize = function() {
      console.log('PPP');
      return _.bindAll(this);
    };

    PostPanel.prototype.show = function() {
      console.log('showPost');
      $('<iframe>').attr('id', 'postLoadArea').attr('src', 'post.html').attr('width', 300).attr('height', 340).appendTo(this.el);
      return $(this.el).show();
    };

    PostPanel.prototype.hide = function() {
      $(this.el).html('');
      return $(this.el).hide();
    };

    return PostPanel;

  })(Backbone.View);

  SearchPanel = (function(_super) {
    __extends(SearchPanel, _super);

    function SearchPanel() {
      this.clear = __bind(this.clear, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.render = __bind(this.render, this);
      this.error = __bind(this.error, this);
      this.onTapSubmitButton = __bind(this.onTapSubmitButton, this);
      this.loading = __bind(this.loading, this);
      this.bottom = __bind(this.bottom, this);      _ref4 = SearchPanel.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SearchPanel.prototype.el = '#SearchPanel';

    SearchPanel.prototype.searchQuery = '';

    SearchPanel.prototype.noMoreResult = false;

    SearchPanel.timeline = '';

    SearchPanel.prototype.initialize = function() {
      var _this = this;

      _.bindAll(this);
      this.timeline = new Timeline;
      this.timeline.bind('add', this.appendTimeline);
      this.timeline.bind('onclicktimeline', this.onclicktimeline);
      this.searchQuery = new SearchResult;
      this.loadingStatus = false;
      this.execSearched = false;
      return $(this.el).load("searchPanel.html", null, function(data, status) {
        if (status !== 'success') {
          return alert("ERROR:検索パネルが読み込めません");
        } else {
          $(SearchPanel.el).html(data);
          $('#backToMainButton').bind('click', _this.onBackToMain);
          return _this.setup();
        }
      });
    };

    SearchPanel.prototype.onBackToMain = function() {
      return this.trigger('backtomain');
    };

    SearchPanel.prototype.onclicktimeline = function(d) {
      this.clear();
      return this.trigger('onclicktimeline', d);
    };

    SearchPanel.prototype.appendTimeline = function(tile) {
      var timelineChildView;

      timelineChildView = new TimelineChildView({
        model: tile
      });
      $("#searchResult").append(timelineChildView.render().el);
      $('.tlTitle').css({
        width: Browser.width - tlImageWidth - 10
      });
      return $('.tlMsg').css({
        width: Browser.width - tlImageWidth - 10
      });
    };

    SearchPanel.prototype.setup = function() {
      var deleteValueButtons,
        _this = this;

      $('#searchSubmitButton').bind('click', this.onTapSubmitButton);
      deleteValueButtons = [];
      $('span.delig').each(function(i) {
        return deleteValueButtons.push(new DeleteValueButton($(this)));
      });
      $('input[type=text]').each(function(i, o) {
        return $(o).bind('keyup', function(e) {
          if (e.keyCode === 13) {
            _this.onTapSubmitButton();
            return $(o).blur();
          }
        });
      });
      return $(this.el).bind('bottom', this.bottom);
    };

    SearchPanel.prototype.bottom = function() {
      var _this = this;

      return setTimeout(function() {
        return _this.sendQuery();
      }, 1500);
    };

    SearchPanel.prototype.loading = function(bool) {
      var _this = this;

      if (bool) {
        $('#loadingAnimation').html('');
        $('#loadingAnimation').append('<img src="img/loadingAnimation.gif">');
        $('#loadingAnimation').height(48);
        return this.loadingStatus = bool;
      } else {
        $('#loadingAnimation').html('');
        if (this.noMoreResult !== true) {
          $('#loadingAnimation').append('<span style="font-size:24px;margin:auto;vertical-align: middle;">タップして続きを見る</span>');
          $('#loadingAnimation').height(48);
          $('#loadingAnimation').bind('click', function() {
            _this.loading(true);
            $(_this.el).trigger('bottom');
            return $('#loadingAnimation').unbind();
          });
        }
        return this.loadingStatus = bool;
      }
    };

    SearchPanel.prototype.onTapSubmitButton = function() {
      $('#searchResultError').html('');
      this.noMoreResult = false;
      this.execSearched = true;
      this.clear();
      this.searchQuery.resetPageCount();
      this.sendQuery();
      return this.trigger('startSearch');
    };

    SearchPanel.prototype.sendQuery = function() {
      var query,
        _this = this;

      query = '';
      this.searchQuery.unbind();
      this.searchQuery.bind('return', function(result) {
        return _this.render(result);
      });
      this.searchQuery.bind('error', function() {
        return _this.error;
      });
      if ($('#SearchPanelInnerContents #id').val() !== void 0) {
        query += 'id=' + $('#SearchPanelInnerContents #id').val() + '&';
      }
      if ($('#SearchPanelInnerContents #b1').val() !== void 0) {
        query += 'b1=' + $('#SearchPanelInnerContents #b1').val() + '&';
      }
      if ($('#SearchPanelInnerContents #b2').val() !== void 0) {
        query += 'b2=' + $('#SearchPanelInnerContents #b2').val() + '&';
      }
      if (query !== '') {
        query.slice(0, -1);
      }
      return this.searchQuery.sendQuery(query);
    };

    SearchPanel.prototype.error = function(t) {
      this.noMoreResult = true;
      return $('#searchResultError').html(t);
    };

    SearchPanel.prototype.render = function(result) {
      var ERROR, TOTAL, item, tlChild, _j, _len1;

      ERROR = result[1][0].ERROR;
      TOTAL = result[1][1].TOTAL;
      result = result[0];
      switch (ERROR) {
        case 'TOOMUCHRESULT':
          this.error('<br />検索結果が100件を超えました。<br />条件を指定しなおしてください。');
          break;
        case 'NOTFOUND':
          this.error('<br />検索にヒットしませんでした。');
          break;
        case 'NOWORD':
          this.error('<br />検索条件を指定してください。');
          break;
        default:
          $('#searchResultError').html(TOTAL + '件ヒットしました。');
          if (result.length < 10) {
            this.noMoreResult = true;
          }
          if (result !== "") {
            for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
              item = result[_j];
              tlChild = new TimelineChild;
              tlChild.set({
                data: item
              });
              this.timeline.add(tlChild);
            }
          } else {
            alert("「" + value + "」では見つかりませんでした。");
          }
      }
      return this.loading(false);
    };

    SearchPanel.prototype.show = function() {
      this.clear();
      Shadow.show();
      $(this.el).show();
      $('input[type=tel]').each(function() {
        console.log(this);
        return $(this).focus();
      });
      $('#loadingAnimation').show();
      return $('#loadingAnimation').height(0);
    };

    SearchPanel.prototype.hide = function() {
      this.execSearched = false;
      this.loadingStatus = false;
      $('#loadingAnimation').hide();
      $('#loadingAnimation').html('');
      $('#loadingAnimation').height(0);
      $('#searchResultError').html('');
      Shadow.hide();
      return $(this.el).hide();
    };

    SearchPanel.prototype.clear = function() {
      this.execSearched = false;
      $('#loadingAnimation').html('');
      return this.timeline.clear();
    };

    return SearchPanel;

  })(Backbone.View);

  DeleteValueButton = (function(_super) {
    __extends(DeleteValueButton, _super);

    function DeleteValueButton() {
      _ref5 = DeleteValueButton.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    DeleteValueButton.prototype.el = '';

    DeleteValueButton.prototype.button = '';

    DeleteValueButton.prototype.initialize = function(_el) {
      var _this = this;

      this.el = _el;
      $('<span>').attr('id', this.el.children('input').attr('id') + 'DelButton').appendTo(this.el);
      $('#' + this.el.children('input').attr('id') + 'DelButton').css({
        'position': 'relative',
        'height': '22px',
        'width': '22px',
        'top': '2px',
        'right': '25px',
        'background-image': 'url(img/delval.png)',
        'cursor': 'pointer',
        'display': 'inline-block',
        'backgroundRepeat': 'no-repeat',
        'backgroundPosition': 'center'
      });
      this.el.children('input').bind('keyup', function() {
        if (_this.el.children('input').val() === '') {
          return $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
            'opacity': 0
          });
        } else {
          return $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
            'opacity': 1
          });
        }
      });
      $('#' + this.el.children('input').attr('id') + 'DelButton').bind('click', function() {
        _this.el.children('input').val('');
        $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
          'opacity': 0
        });
        return $('#' + _this.el.children('input').attr('id') + 'DelButton').focus();
      });
      return $('#' + this.el.children('input').attr('id') + 'DelButton').css({
        'opacity': 0
      });
    };

    return DeleteValueButton;

  })(Backbone.View);

  Timeline = (function(_super) {
    __extends(Timeline, _super);

    function Timeline() {
      _ref6 = Timeline.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Timeline.prototype.model = TimelineChild;

    Timeline.prototype.clear = function() {
      return this.each(function(tlChild) {
        return tlChild.clear();
      });
    };

    return Timeline;

  })(Backbone.Collection);

  TimelineChild = (function(_super) {
    __extends(TimelineChild, _super);

    function TimelineChild() {
      _ref7 = TimelineChild.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    TimelineChild.prototype.defaults = {
      data: ''
    };

    TimelineChild.prototype.initialize = function() {
      return this.bind('onclicktimeline', this.onclicktimeline);
    };

    TimelineChild.prototype.clear = function() {
      this.unbind;
      this.destroy;
      return this.view.unrender();
    };

    return TimelineChild;

  })(Backbone.Model);

  TimelineChildView = (function(_super) {
    __extends(TimelineChildView, _super);

    function TimelineChildView() {
      this.onclicks = __bind(this.onclicks, this);
      this.unrender = __bind(this.unrender, this);
      this.render = __bind(this.render, this);      _ref8 = TimelineChildView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    TimelineChildView.prototype.tagName = 'div';

    TimelineChildView.prototype.data = '';

    TimelineChildView.prototype.events = {
      "click": "onclicks"
    };

    TimelineChildView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.view = this;
    };

    TimelineChildView.prototype.render = function() {
      var item, tl;

      item = this.model.get('data');
      this.data = item;
      tl = $(this.el).attr('class', 'timelineChild').attr('id', 'timelineChild' + item.id);
      $('<img />').attr('class', 'tlImg').attr('width', tlImageWidth).attr('src', 'swfData/blockimg/' + item.img + '.jpg').load().appendTo(tl);
      $('<div>').attr('class', 'tlTitle').html(item.b1).appendTo(tl);
      $('<br />').appendTo(tl);
      $('<div>').attr('class', 'tlMsg').html(item.b2 + ("(" + item.id + ")")).appendTo(tl);
      $('<br />').attr('class', 'timelineBR').appendTo(tl);
      return this;
    };

    TimelineChildView.prototype.unrender = function() {
      $(this.el).remove();
      return $(this.el).unbind();
    };

    TimelineChildView.prototype.onclicks = function() {
      return this.model.trigger('onclicktimeline', this.data.num);
    };

    return TimelineChildView;

  })(Backbone.View);

  SearchResult = (function(_super) {
    __extends(SearchResult, _super);

    function SearchResult() {
      this.nextPage = __bind(this.nextPage, this);
      this.resetPageCount = __bind(this.resetPageCount, this);
      this.queryResult = __bind(this.queryResult, this);
      this.sendQuery = __bind(this.sendQuery, this);      _ref9 = SearchResult.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    SearchResult.prototype.page = 1;

    SearchResult.prototype.linePerPage = 30;

    SearchResult.prototype.sendQuery = function(query) {
      var pageQuery,
        _this = this;

      if (query !== '') {
        pageQuery = '&page=' + this.page;
      } else {
        pageQuery = 'page=' + this.page;
      }
      return $.ajax(TIMELINE_API, {
        type: "GET",
        data: query + pageQuery,
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.trigger('error');
        },
        success: function(data) {
          _this.nextPage();
          return _this.queryResult(data);
        }
      });
    };

    SearchResult.prototype.queryResult = function(result) {
      return this.trigger('return', result);
    };

    SearchResult.prototype.resetPageCount = function() {
      return this.page = 1;
    };

    SearchResult.prototype.nextPage = function() {
      return this.page++;
    };

    return SearchResult;

  })(Backbone.View);

  /**
   * Class Browser 環境設定関連
   * ブラウザチェック、それにあわせた描画領域の設定、アドレスバーを隠す等
   * 完成したらちゃんと書く
  */


  Browser = (function(_super) {
    __extends(Browser, _super);

    function Browser() {
      _ref10 = Browser.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Browser.device = '';

    Browser.os = '';

    Browser.width = 0;

    Browser.height = 0;

    Browser.orient = 0;

    Browser.prototype.initialize = function() {
      _.bindAll(this);
      return Browser.setup();
    };

    Browser.setup = function() {
      if (navigator.userAgent.match(/iPhone/i || navigator.userAgent.match(/iPod/i))) {
        Browser.device = 'smartphone';
        Browser.os = 'ios';
        Browser.version = '';
        Browser.width = Math.abs(window.orientation) !== 90 ? screen.width : screen.height;
        Browser.height = Math.abs(window.orientation) !== 90 ? screen.height - 64 : screen.width - 52;
      } else if (navigator.userAgent.match(/iPad/i)) {
        Browser.device = 'tablet';
        Browser.os = 'ios';
        Browser.version = '';
        Browser.width = Math.abs(window.orientation) !== 90 ? screen.width : screen.height;
        Browser.height = Math.abs(window.orientation) !== 90 ? screen.height - 96 : screen.width - 96;
      } else if (navigator.userAgent.match(/Android/i && navigator.userAgent.match(/Mobile/i))) {
        Browser.device = 'smartphone';
        Browser.os = 'android';
        Browser.version = '';
        Browser.width = $(document).width();
        Browser.height = $(document).height();
      } else if (navigator.userAgent.match(/Android/i)) {
        Browser.device = 'tablet';
        Browser.os = 'android';
        Browser.version = '';
        Browser.width = $(document).width();
        Browser.height = $(document).height();
      } else {
        Browser.device = 'pc';
        Browser.width = $(window).width();
        Browser.height = $(window).height();
      }
      $('#Pyramid').width(Browser.width);
      $('#Pyramid').height(Browser.height);
      return Browser.hideAddressBar();
    };

    Browser.hideAddressBar = function() {
      if (Browser.getOS() === 'ios') {
        return setTimeout(scrollTo, 100, 0, 1);
      }
    };

    Browser.getDevice = function() {
      return Browser.device;
    };

    Browser.getOS = function() {
      return Browser.os;
    };

    return Browser;

  }).call(this, Backbone.View);

  Utility = (function() {
    function Utility() {}

    Utility.type = (function() {
      var classToType, name, _j, _len1, _ref11;

      classToType = {};
      _ref11 = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
      for (_j = 0, _len1 = _ref11.length; _j < _len1; _j++) {
        name = _ref11[_j];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      return function(obj) {
        var strType;

        strType = Object.prototype.toString.call(obj);
        return classToType[strType] || "object";
      };
    })();

    Utility.getDiagonal = function(_x, _y) {
      if (_x > 0 && _y > 0) {
        return Math.sqrt(Math.pow(_x, 2) + Math.pow(_y, 2));
      } else {
        return false;
      }
    };

    return Utility;

  })();

  /**
   * Class Pyramidクラス
  */


  Pyramid = (function(_super) {
    __extends(Pyramid, _super);

    function Pyramid() {
      _ref11 = Pyramid.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    Pyramid.outerel = '#Pyramid';

    Pyramid.prototype.el = "#Tiles";

    Pyramid.prototype.searchHit = '';

    /*
    	初期化メソッド
    */


    Pyramid.prototype.initialize = function() {
      _.bindAll(this);
      if (Browser.device !== 'pc') {
        $(this.el).bind('touchstart', this.onMouseDown);
        $(this.el).bind('touchend', this.onMouseUp);
        $(this.el).bind('touchmove', this.onMouseMove);
        $(this.el).bind('gesturestart', this.onGestureStart);
        $(this.el).bind('gesturechange', this.onGestureMove);
        $(this.el).bind('gestureend', this.onGestureEnd);
      } else {
        $(this.el).bind('mousedown', this.onMouseDown);
        $(this.el).bind('mouseup', this.onMouseUp);
        $(this.el).bind('mousemove', this.onMouseMove);
      }
      $(this.el).flickable();
      this.dragging = false;
      this.tiles = new Tiles;
      this.tiles.bind('add', this.appendTile);
      $(this.el).css({
        'cursor': '-moz-grab'
      });
      $(this.el).css({
        'background-image': "url('swfData/bg.jpg')",
        'background-size': 'contain'
      });
      this.update();
      return this.pyramidSetPositionToCenter();
    };

    Pyramid.show = function() {
      return $(this.outerel).show();
    };

    Pyramid.hide = function() {
      return $(this.outerel).hide();
    };

    /*
    	マウスイベント関連メソッド群
    */


    Pyramid.prototype.onMouseDown = function(e) {
      var cords;

      cords = Point.getPoint(e);
      Point.lock(e);
      if (Point.isLock() === false) {
        $(this.el).css({
          transform: "scale(1)"
        });
        e.preventDefault();
        this.dragging = true;
        if (Utility.type(cords[0]) !== 'array') {
          $(this.el).css({
            'cursor': '-moz-grab'
          });
          this.dragStartX = cords[0];
          this.dragStartY = cords[1];
          this.dragStartLeft = $(this.el).position().left;
          this.dragStartTop = $(this.el).position().top;
          this.dragStartPyramidX = this.getPyramidPos()[0];
          return this.dragStartPyramidY = this.getPyramidPos()[1];
        } else {
          $(this.el).css({
            'cursor': '-moz-grab'
          });
          this.dragStartX = cords[0][0] / 2 + cords[1][0] / 2;
          this.dragStartY = cords[0][1] / 2 + cords[1][1] / 2;
          this.dragStartLeft = $(this.el).position().left;
          this.dragStartTop = $(this.el).position().top;
          this.dragStartPyramidX = this.getPyramidPos()[0];
          return this.dragStartPyramidY = this.getPyramidPos()[1];
        }
      }
      /*
      		else if Utility.type(cords[0]) is 'array'
      			$(@el).css {'cursor':'-moz-grab'}
      			@pinchinStartCenterX = (cords[0][0] + cords[1][0])/2
      			@pinchinStartCenterY = (cords[0][1] + cords[1][1])/2
      
      			@pinchinStart = cords
      */

    };

    Pyramid.prototype.onMouseUp = function(e) {
      var cords, cordx, cordy;

      cords = Point.getPoint(e);
      if (cords !== void 0 && Point.isLock() === false) {
        $(this.el).css({
          transform: "scale(1)"
        });
        e.preventDefault();
        this.dragging = false;
        $(this.el).css({
          'cursor': ''
        });
        cordx = Utility.type(cords[0]) !== 'array' ? cords[0] : cords[0][0];
        cordy = Utility.type(cords[1]) !== 'array' ? cords[1] : cords[0][1];
        if (this.isSingleTap(this.dragStartX, cordx) && this.isSingleTap(this.dragStartY, cordy)) {
          if (!Shadow.isShow() && nowZoom > 3) {
            return this.trigger('openPopupFromPoint', this.getNumFromPoint([cords[0], cords[1]]));
          }
        } else if (this.isSingleTap(this.dragStartX, cordx) && this.isSingleTap(this.dragStartY, cordy) && this.isOnTiles([cords[0][0], cords[0][1]])) {
          if (!Shadow.isShow() && nowZoom > 3) {
            return this.trigger('openPopupFromPoint', this.getNumFromPoint([cords[0][0], cords[0][1]]));
          }
        } else {
          return this.update();
        }
      }
    };

    Pyramid.prototype.onMouseMove = function(e) {
      var cords;

      cords = Point.getPoint(e);
      if (cords !== void 0 && Point.isLock() === false) {
        e.preventDefault();
        if (Utility.type(cords[0]) === "number" && this.dragging === true) {
          $(this.el).css({
            'left': this.dragStartPyramidX + (this.getMousePos(e)[0] - this.dragStartX),
            'top': this.dragStartPyramidY + (this.getMousePos(e)[1] - this.dragStartY)
          });
          return this.trigger('moving', [this.dragStartPyramidX + (this.getMousePos(e)[0] - this.dragStartX), this.dragStartPyramidY + (this.getMousePos(e)[1] - this.dragStartY)]);
        } else if (Utility.type(cords[0]) === "array" && this.dragging === true) {

        } else {

        }
      }
    };

    Pyramid.prototype.onGestureStart = function(e) {
      if (Point.isLock() === false) {
        return $(this.el).css({
          transform: "scale(1)"
        });
      }
    };

    Pyramid.prototype.onGestureMove = function(e) {
      var dx, dy, localX, localY;

      if (Point.isLock() === false) {
        localX = this.dragStartX - this.dragStartLeft;
        localY = this.dragStartY - this.dragStartTop;
        dx = (zoomSize[nowZoom][0] - (zoomSize[nowZoom][0] * e.originalEvent.scale)) / 2;
        dx = (dx / e.originalEvent.scale) + (zoomSize[nowZoom][0] - localX);
        dy = (zoomSize[nowZoom][1] - (zoomSize[nowZoom][1] * e.originalEvent.scale)) / 2;
        dy = (dy / e.originalEvent.scale) + (zoomSize[nowZoom][1] - localY);
        return $(this.el).css({
          transform: "scale(" + e.originalEvent.scale + ") translate(" + dx + "px," + dy + "px)",
          left: (zoomSize[nowZoom][0] - localX) * -1 + this.dragStartLeft,
          top: (zoomSize[nowZoom][1] - localY) * -1 + this.dragStartTop
        });
      }
    };

    Pyramid.prototype.onGestureEnd = function(e) {
      var cnt, item, _j, _k, _len1, _len2;

      if (Point.isLock() === false) {
        $(this.el).css({
          left: this.dragStartLeft,
          top: this.dragStartTop,
          transform: "scale(1)"
        });
        cnt = 0;
        if (e.originalEvent.scale > 1) {
          for (_j = 0, _len1 = zoomSize.length; _j < _len1; _j++) {
            item = zoomSize[_j];
            if (zoomSize[nowZoom][0] * e.originalEvent.scale > item[0] && item[0] !== "") {

            } else if (item[0] !== void 0) {
              break;
            }
            cnt++;
          }
        } else {
          for (_k = 0, _len2 = zoomSize.length; _k < _len2; _k++) {
            item = zoomSize[_k];
            if (zoomSize[nowZoom][0] * e.originalEvent.scale < item[0]) {
              break;
            }
            cnt++;
          }
        }
        console.log("CONSOLE.LOG:", cnt);
        if (nowZoom !== cnt && cnt < zoomSize.length) {
          prevZoom = nowZoom;
          nowZoom = cnt;
          return this.update('pinchZoom');
        } else if (cnt > zoomSize.length - 1) {
          console.log("CONSOLE.LOG2:", cnt);
          prevZoom = nowZoom;
          nowZoom = zoomSize.length - 2;
          return this.update('pinchZoom');
        }
      }
    };

    Pyramid.prototype.zoomIn = function(_z) {
      var rate;

      rate = Math.floor(_z / 2);
      if (nowZoom < zoomSize.length - 1) {
        prevZoom = nowZoom;
        if (nowZoom + rate < zoomSize.length - 1) {
          return nowZoom = nowZoom + rate;
        } else {
          return nowZoom = zoomSize.length - 1;
        }
      }
    };

    Pyramid.prototype.zoomOut = function(_z) {
      var rate;

      _z = (_z - 1) * 10;
      rate = Math.floor(_z / 2);
      if (nowZoom > minZoom) {
        prevZoom = nowZoom;
        if (nowZoom - rate > minZoom) {
          return nowZoom = minZoom;
        } else {
          return nowZoom = nowZoom + rate;
        }
      }
    };

    Pyramid.prototype.isOnTiles = function(p) {
      if (p[0] >= this.getPyramidPos()[0] && p[1] >= this.getPyramidPos()[1] && p[0] <= zoomSize[nowZoom][0] + this.getPyramidPos()[0] && p[1] <= parseInt(zoomSize[nowZoom][1]) + this.getPyramidPos()[1]) {
        return true;
      } else {
        return false;
      }
    };

    Pyramid.prototype.isSingleTap = function(_a, _b) {
      console.log(_a, _b);
      if (_a + 3 > _b && _b > _a - 3) {
        return true;
      } else {
        return false;
      }
    };

    Pyramid.prototype.getNumFromPoint = function(p) {
      var xb, yb;

      xb = Math.floor((p[0] - this.getPyramidPos()[0]) / arrZoomSizeX[nowZoom]);
      yb = Math.round((p[1] - this.getPyramidPos()[1] + (arrZoomSizeX[nowZoom] / 2)) / arrZoomSizeY[nowZoom]);
      yb = yb === 0 || yb === 1 ? 0 : yb - 1;
      xb++;
      return motifWidth * yb + xb;
    };

    /**
    	 * 描画範囲調査メソッド
    	 * もっとスマートに出来たらなぁといつも思う
    */


    Pyramid.prototype.checkActiveTile = function() {
      var displayAreaEndX, displayAreaEndY, displayAreaStartX, displayAreaStartY, loadEndX, loadEndY, loadStartX, loadStartY;

      displayAreaStartX = this.getPyramidPos()[0] > 0 && Browser.width - Math.abs(this.getPyramidPos()[0]) > 0 ? 0 : Math.abs(this.getPyramidPos()[0]);
      displayAreaStartY = this.getPyramidPos()[1] > 0 && Browser.height - Math.abs(this.getPyramidPos()[1]) > 0 ? 0 : Math.abs(this.getPyramidPos()[1]);
      displayAreaEndX = this.getPyramidPos()[0] + zoomSize[nowZoom][0] > $('#Pyramid').width() ? $('#Pyramid').width() - this.getPyramidPos()[0] : zoomSize[nowZoom][0];
      displayAreaEndY = this.getPyramidPos()[1] + zoomSize[nowZoom][1] > $('#Pyramid').height() ? $('#Pyramid').height() - this.getPyramidPos()[1] : zoomSize[nowZoom][1];
      if (displayAreaEndX <= 0) {
        displayAreaEndX = 0;
      }
      if (displayAreaEndY <= 0) {
        displayAreaEndY = 0;
      }
      loadStartX = Math.floor(displayAreaStartX / tileWidth);
      loadStartY = Math.floor(displayAreaStartY / tileHeight);
      loadEndX = Math.floor(displayAreaEndX / tileWidth === Math.floor(zoomSize[nowZoom][0] / tileWidth)) ? Math.floor(displayAreaEndX / tileWidth) - 1 : Math.floor(displayAreaEndX / tileWidth);
      loadEndY = Math.floor(displayAreaEndY / tileHeight === Math.floor(zoomSize[nowZoom][1] / tileHeight)) ? Math.floor(displayAreaEndY / tileHeight) - 1 : Math.floor(displayAreaEndY / tileHeight);
      return [loadStartX, loadStartY, loadEndX, loadEndY];
    };

    /**
    	 * 描画メソッド
    	 * @param {startX} Number
    	 * @param {startY} Number
    	 * @param {endX} Number
    	 * @param {endY} Number
    */


    Pyramid.prototype.render = function(t) {
      var tile, x2, y, y2;

      x = t[0];
      y = t[1];
      x2 = t[2];
      y2 = t[3];
      this.tiles.removeAllTiles();
      while (y <= t[3]) {
        while (x <= t[2]) {
          if (!this.tiles.isSameTile(nowZoom, x, y)) {
            tile = new Tile;
            tile.set({
              x: x,
              y: y,
              z: nowZoom,
              display: true
            });
            this.tiles.add(tile);
          }
          x++;
        }
        y++;
        x = t[0];
      }
      y = t[1];
      return this.trigger('marker');
    };

    /**
    	 * イベントコールバック用
    */


    Pyramid.prototype.update = function(h) {
      switch (h) {
        case 'zoomIn':
          this.moveToZoomInPos();
          break;
        case 'zoomOut':
          this.moveToZoomOutPos();
          break;
        case 'pinchZoom':
          this.moveToPinchZoomPos();
          break;
      }
      $(this.el).width(zoomSize[nowZoom][0]);
      $(this.el).height(zoomSize[nowZoom][1]);
      return this.render(this.checkActiveTile());
    };

    /**
    	 * Pyramidを指定numにあわせて移動させるメソッド
    */


    Pyramid.prototype.moveToNum = function(d) {
      var tx, ty,
        _this = this;

      if (d % motifWidth === 0) {
        tx = motifWidth * arrZoomSizeX[nowZoom] * -1;
        ty = Math.floor((d / motifWidth) - 1) * arrZoomSizeX[nowZoom] * -1;
      } else {
        tx = d % motifWidth * arrZoomSizeX[nowZoom] * -1;
        ty = Math.floor(d / motifWidth) * arrZoomSizeY[nowZoom] * -1;
      }
      $(this.el).css({
        left: (Browser.width / 2) + tx + arrZoomSizeX[nowZoom] / 2,
        top: (Browser.height / 2) + ty - arrZoomSizeY[nowZoom] / 2
      });
      setTimeout(function() {
        return _this.update('');
      }, 500);
      return this.trigger('moving', [(Browser.width / 2) + tx + arrZoomSizeX[nowZoom] / 2, (Browser.height / 2) + ty - arrZoomSizeY[nowZoom] / 2]);
    };

    Pyramid.prototype.moveToPinchZoomPos = function() {
      console.log("POS:", this.dragStartTop, (this.dragStartY - this.dragStartTop) * (nowZoom - prevZoom), this.dragStartTop, this.dragStartY - this.dragStartTop, Math.pow(2, nowZoom - prevZoom));
      if (this.dragStartTop !== void 0 && this.dragStartLeft !== void 0) {
        $(this.el).css({
          left: this.dragStartLeft - ((this.dragStartX - this.dragStartLeft) * (Math.pow(2, nowZoom - prevZoom) - 1)),
          top: this.dragStartTop - ((this.dragStartY - this.dragStartTop) * (Math.pow(2, nowZoom - prevZoom) - 1))
        });
        return this.trigger('moving', [$(this.el).position().left, $(this.el).position().top]);
      }
    };

    Pyramid.prototype.moveToZoomInPos = function() {
      var newPyramidPos, pyramidPos;

      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (nowZoom === zoomSize.length - 1 && commentZoom === true) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] * 2, pyramidPos[1] * 2);
      }
      $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
      return this.trigger('moving', [newPyramidPos[0], newPyramidPos[1]]);
    };

    Pyramid.prototype.moveToZoomOutPos = function() {
      var newPyramidPos, pyramidPos;

      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (prevZoom !== 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[1] / 2);
      } else if (prevZoom === 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[1] / 2);
      }
      $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
      return this.trigger('moving', [newPyramidPos[0], newPyramidPos[1]]);
    };

    /**
    	 * 座標コンバーター
    */


    Pyramid.prototype.convertToGrobalCenterPos = function(_x, _y) {
      var prevPyramidHeight, prevPyramidWidth, y;

      if (nowZoom !== 1 || prevZoom === zoomSize.length - 1) {
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      } else {
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      }
      x = (_x + prevPyramidWidth / 2) - Browser.width / 2;
      y = (_y + prevPyramidHeight / 2) - Browser.height / 2;
      return [x, y];
    };

    /**
    	 * 座標コンバーター2
    */


    Pyramid.prototype.convertToLocalCenterPos = function(_x, _y) {
      var nowPyramidHeight, nowPyramidWidth, y;

      nowPyramidWidth = zoomSize[nowZoom][0];
      nowPyramidHeight = zoomSize[nowZoom][1];
      x = _x - nowPyramidWidth / 2 + Browser.width / 2;
      y = _y - nowPyramidHeight / 2 + Browser.height / 2;
      return [x, y];
    };

    /*
    	 * addイベントのコールバックメソッド
    	 * 原則としてcollectionへbindする事
    	 * @param {tile} Tile
    */


    Pyramid.prototype.appendTile = function(tile) {
      var tileView;

      tileView = new TileView({
        model: tile
      });
      return $(this.el).append(tileView.render().el);
    };

    /*
    	Pyramid位置操作メソッド群
    */


    Pyramid.prototype.pyramidSetPositionToCenter = function() {
      $(this.el).css({
        left: Browser.width / 2 - zoomSize[nowZoom][0] / 2,
        top: Browser.height / 2 - zoomSize[nowZoom][1] / 2
      });
      return this.trigger('moving', [Browser.width / 2 - zoomSize[nowZoom][0] / 2, Browser.height / 2 - zoomSize[nowZoom][1] / 2]);
    };

    /*
    	 * 位置取得メソッド群
    	 * 基本はreturnする簡単なお仕事
    	 * @param {e} Event
    */


    Pyramid.prototype.getMousePos = function(e) {
      var cords;

      cords = Point.getPoint(e);
      return [cords[0], cords[1]];
    };

    Pyramid.prototype.getPyramidPos = function() {
      return [$(this.el).position().left, $(this.el).position().top];
    };

    return Pyramid;

  })(Backbone.View);

  Marker = (function(_super) {
    __extends(Marker, _super);

    function Marker() {
      _ref12 = Marker.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    Marker.prototype.result = '';

    Marker.prototype.clear = function() {
      this.result = '';
      return $('#Marker').remove();
    };

    Marker.prototype.setResult = function(num) {
      return this.result = num;
    };

    Marker.prototype.render = function() {
      var tx, ty, weight,
        _this = this;

      if (this.result !== '') {
        $('#Marker').remove();
        tx = (this.result % motifWidth - 1) * arrZoomSizeX[nowZoom];
        ty = Math.floor(this.result / motifWidth) * arrZoomSizeY[nowZoom];
        if (this.result % motifWidth === 0) {
          tx = (motifWidth - 1) * arrZoomSizeX[nowZoom];
          ty = Math.floor((this.result / motifWidth) - 1) * arrZoomSizeX[nowZoom];
        } else {
          tx = (this.result % motifWidth - 1) * arrZoomSizeY[nowZoom];
          ty = Math.floor(this.result / motifWidth) * arrZoomSizeY[nowZoom];
        }
        if (tx < 0) {
          tx = 0;
        }
        $('<div />').attr('id', 'Marker').appendTo($('#Tiles'));
        weight = Math.floor(nowZoom / 2) < 1 ? 1 : Math.floor(nowZoom / 2);
        $('#Marker').css({
          zIndex: 3000,
          width: arrZoomSizeX[nowZoom] - (2 * weight),
          height: arrZoomSizeY[nowZoom] - (2 * weight),
          left: tx,
          top: ty - 2,
          border: 'solid ' + weight + 'px #FF0000'
        });
        return setTimeout(function() {
          return _this.swap();
        }, 1000);
      }
    };

    Marker.prototype.swap = function() {
      return $('#Marker').css({
        'zIndex': 3000
      });
    };

    return Marker;

  })(Backbone.View);

  /**
   * Tileクラス
   * Tile画像に必要な情報のみ保持するModelクラス
   * @param {x} Number
   * @param {y} Number
   * @param {z} Number
   * @param {display} Boolean
  */


  Tile = (function(_super) {
    __extends(Tile, _super);

    function Tile() {
      _ref13 = Tile.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    Tile.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0,
      display: false
    };

    Tile.prototype.clear = function() {
      this.destroy;
      return this.view.unrender();
    };

    return Tile;

  })(Backbone.Model);

  /**
   * Class TileViewクラス Tile画像を描画したり削除する役割のみ
  */


  TileView = (function(_super) {
    __extends(TileView, _super);

    function TileView() {
      this.unrender = __bind(this.unrender, this);
      this.loadTile = __bind(this.loadTile, this);
      this.render = __bind(this.render, this);      _ref14 = TileView.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    TileView.prototype.tagName = 'img';

    TileView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.view = this;
    };

    TileView.prototype.render = function() {
      var url, y, z;

      x = this.model.get('x');
      y = this.model.get('y');
      z = this.model.get('z');
      url = tileImageDir + ("" + z + "/" + y + "/") + 'z' + z + 'x' + x + 'y' + y + tileImageExtension;
      $(this.el).attr({
        id: 'z' + z + 'x' + x + 'y' + y,
        src: url
      }).css({
        'position': 'absolute',
        'left': x * tileWidth,
        'top': y * tileWidth
      }).load();
      return this;
    };

    TileView.prototype.loadTile = function() {};

    TileView.prototype.unrender = function() {
      return $(this.el).remove();
    };

    return TileView;

  })(Backbone.View);

  /**
   * Class Tiles Tileクラスを管理する役割。描画に関してのイベント管理とか。イベントの割り当ては原則、Pyramidクラスで行う
  */


  Tiles = (function(_super) {
    __extends(Tiles, _super);

    function Tiles() {
      _ref15 = Tiles.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    Tiles.prototype.model = Tile;

    Tiles.prototype.initialize = function() {
      return _.bindAll(this);
    };

    Tiles.prototype.isSameTile = function(_z, _x, _y) {
      var data, item, res, _j, _len1;

      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        item = data[_j];
        if (("" + (item.get('z')) + " " + (item.get('x')) + " " + (item.get('y'))) === ("" + _z + " " + _x + " " + _y)) {
          res = true;
        } else {
          res = false;
        }
      }
      return res;
    };

    Tiles.prototype.getNowVisibleList = function() {
      var data;

      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      return data;
    };

    Tiles.prototype.setRemove = function() {
      var data;

      data = [];
      return this.each(function(tile) {
        return data.push(tile);
      });
    };

    Tiles.prototype.removeCheckedTiles = function() {
      var tile, _j, _len1, _results;

      _results = [];
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        tile = data[_j];
        if (tile.get('display' !== true)) {
          _results.push(tile.clear());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Tiles.prototype.removeAllTiles = function() {
      return this.each(function(tile) {
        return tile.clear();
      });
    };

    return Tiles;

  })(Backbone.Collection);

  /**
   * Class ControlPanel コンパネに表示するボタンとか管理
  */


  ControlPanel = (function(_super) {
    __extends(ControlPanel, _super);

    function ControlPanel() {
      _ref16 = ControlPanel.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    ControlPanel.el = '#ControlPanel';

    ControlPanel.prototype.initialize = function() {
      var showHomeButton, showPostButton, showSearchPanelButton, zoomInButton, zoomOutButton;

      _.bindAll(this);
      zoomInButton = new ClickOnlyButton('#ZoomInButton');
      zoomInButton.bind('change', this.zoomIn);
      zoomOutButton = new ClickOnlyButton('#ZoomOutButton');
      zoomOutButton.bind('change', this.zoomOut);
      showSearchPanelButton = new ClickOnlyButton('#SearchPanelButton');
      showSearchPanelButton.bind('change', this.showSearchPanel);
      showHomeButton = new ClickOnlyButton('#HomeButton');
      showHomeButton.bind('change', this.onclickhomebutton);
      showPostButton = new ClickOnlyButton('#PostPanelButton');
      return showPostButton.bind('change', this.showPostPanel);
    };

    ControlPanel.prototype.zoomIn = function() {
      if (nowZoom < zoomSize.length - 1) {
        prevZoom = nowZoom;
        nowZoom++;
        return this.trigger('change', 'zoomIn');
      }
    };

    ControlPanel.prototype.zoomOut = function() {
      if (nowZoom > minZoom) {
        prevZoom = nowZoom;
        nowZoom--;
        return this.trigger('change', 'zoomOut');
      }
    };

    ControlPanel.prototype.showSearchPanel = function() {
      return this.trigger('showSearchPanel');
    };

    ControlPanel.prototype.onclickhomebutton = function() {
      return this.trigger('onclickhomebutton');
    };

    ControlPanel.prototype.showPostPanel = function() {
      return this.trigger('showPostPanel');
    };

    ControlPanel.show = function() {
      return $(ControlPanel.el).show();
    };

    ControlPanel.hide = function() {
      return $(ControlPanel.el).hide();
    };

    return ControlPanel;

  }).call(this, Backbone.View);

  ControlPanelModel = (function(_super) {
    __extends(ControlPanelModel, _super);

    function ControlPanelModel() {
      _ref17 = ControlPanelModel.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    return ControlPanelModel;

  })(Backbone.Model);

  /**
   * Class ClickOnlyButton 汎用ボタンクラス。クラス名はちょっと考えたい。
   * @param div 描画用DOM
  */


  ClickOnlyButton = (function(_super) {
    __extends(ClickOnlyButton, _super);

    function ClickOnlyButton() {
      _ref18 = ClickOnlyButton.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    ClickOnlyButton.prototype.el = '';

    ClickOnlyButton.prototype.initialize = function(_el) {
      _.bindAll(this);
      this.el = _el;
      $(this.el).unbind();
      if (Browser.device !== 'pc') {
        return $(this.el).bind("touchend", this.onMouseUp);
      } else {
        return $(this.el).bind("mouseup", this.onMouseUp);
      }
    };

    ClickOnlyButton.prototype.onMouseUp = function(e) {
      e.preventDefault();
      return this.trigger('change');
    };

    ClickOnlyButton.prototype.destroy = function() {
      $(this.el).unbind();
      return $(this.el).remove();
    };

    return ClickOnlyButton;

  })(Backbone.View);

  /**
   * Class Point イベントオブジェクトを受け取って座標を返すクラス。デバイス・ブラウザ問わずが基本思想
   * @param event マウスイベントオブジェクト
  */


  Point = (function() {
    function Point() {}

    Point.locked = false;

    Point.plock = 0;

    Point.lock = function(e) {
      if (e.originalEvent.touches.length > 2 && this.plock < 3) {
        this.locked = true;
      } else {
        this.locked = false;
      }
      return this.plock = e.originalEvent.touches.length;
    };

    Point.isLock = function() {
      return this.locked;
    };

    Point.getPoint = function(e) {
      var cords, ftime, hx, hy, item, lx, ly, _j, _len1, _ref19;

      if (Point.isTouch()) {
        if (e.originalEvent.touches.length === 1) {
          return [e.originalEvent.touches[0].pageX, e.originalEvent.touches[0].pageY];
        } else if (e.originalEvent.touches.length > 1) {
          cords = [];
          ftime = false;
          _ref19 = e.originalEvent.touches;
          for (_j = 0, _len1 = _ref19.length; _j < _len1; _j++) {
            item = _ref19[_j];
            if (item.pageX > hx && ftime === true) {
              hx = item.pageX;
            } else if (ftime === false) {
              hx = item.pageX;
            }
            if (item.pageX < lx && ftime === true) {
              lx = item.pageX;
            } else if (ftime === false) {
              lx = item.pageX;
            }
            if (item.pageY > hy && ftime === true) {
              hy = item.pageY;
            } else if (ftime === false) {
              hy = item.pageY;
            }
            if (item.pageY < ly && ftime === true) {
              ly = item.pageY;
            } else if (ftime === false) {
              ly = item.pageY;
            }
            ftime = true;
          }
          cords.push([hx, hy]);
          cords.push([lx, ly]);
          return cords;
        } else {
          return [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY];
        }
      } else {
        return [e.pageX, e.pageY];
      }
    };

    Point.isTouch = function() {
      return 'ontouchstart' in window;
    };

    return Point;

  })();

  Shadow = (function(_super) {
    __extends(Shadow, _super);

    function Shadow() {
      _ref19 = Shadow.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    Shadow.el = '#Shadow';

    Shadow.show = function() {
      Shadow.setSize();
      return $(Shadow.el).show();
    };

    Shadow.hide = function() {
      Shadow.setSize();
      return $(Shadow.el).hide();
    };

    Shadow.prototype.resize = function() {
      return Shadow.setSize();
    };

    Shadow.setSize = function() {
      $(this.el).width(Browser.width);
      $(this.el).height(Browser.height);
      return console.log("setSize");
    };

    Shadow.setFullSize = function(_h) {
      $(this.el).width(Browser.width);
      if (Browser.height > _h + 20) {
        $(this.el).height(Browser.height);
      } else {
        $(this.el).height($(this.el).height(_h + 20));
      }
      return console.log("setFullSize" + Browser.height + "/" + $(this.el).height()(_h + 20));
    };

    Shadow.isShow = function() {
      var res;

      res = $(Shadow.el).css('display');
      if (res === 'none') {
        return false;
      } else {
        return true;
      }
    };

    return Shadow;

  }).call(this, Backbone.View);

  Popup = (function(_super) {
    __extends(Popup, _super);

    function Popup() {
      this.closeButtonAction = __bind(this.closeButtonAction, this);
      this.render = __bind(this.render, this);      _ref20 = Popup.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    Popup.prototype.el = '#Popup';

    Popup.prototype.initialize = function() {
      return _.bindAll(this);
    };

    Popup.prototype.openPopupFromPoint = function(p) {
      var _this = this;

      return $.getJSON(SEARCH_API, {
        'n': p
      }, function(data, status) {
        if (status && data !== null) {
          return _this.render(data[0]);
        } else {
          return _this.hide();
        }
      });
    };

    Popup.prototype.clear = function() {
      if ($(this.el).html() !== '') {
        $("#closeButton").unbind();
        return $(this.el).html('');
      }
    };

    Popup.prototype.closePopup = function(e) {
      if (e !== void 0) {
        e.preventDefault();
      }
      this.clear();
      return this.hide();
    };

    Popup.prototype.render = function(data) {
      var _this = this;

      return $('<img />').css('margin-top', 5).attr('src', zoomImageDir + data.img + '.jpg').load(function() {
        $('<div />').attr('id', 'popupOuterText').appendTo($(_this.el));
        $("#popupOuterText").css({
          'width': '80%',
          'margin': 'auto'
        });
        $('<p>').attr('class', 'popupB1Style').text(data.b1).appendTo($(_this.el));
        $('<p>').attr('class', 'popupB3Style').text(data.b3).appendTo($(_this.el));
        $('<p>').attr('class', 'popupB2Style').text(data.b2 + ("(" + data.id + ")")).appendTo($(_this.el));
        $('<input>').attr('id', 'closeButton').attr('type', 'button').attr('value', '閉じる').appendTo($(_this.el));
        _this.closeButtonAction();
        return _this.show();
      }).error(function() {
        return _this.closePopup();
      }).appendTo($(this.el));
    };

    Popup.prototype.closeButtonAction = function() {
      var _this = this;

      if (Browser.device !== 'pc') {
        return $("#closeButton").bind("touchend", function(e) {
          e.preventDefault();
          return _this.closePopup(e);
        });
      } else {
        return $("#closeButton").bind("mouseup", function(e) {
          e.preventDefault();
          return _this.closePopup(e);
        });
      }
    };

    Popup.prototype.show = function() {
      $(this.el).show();
      Shadow.show();
      return Shadow.setFullSize($(this.el).height());
    };

    Popup.prototype.hide = function() {
      Shadow.setSize();
      $(this.el).hide();
      return Shadow.hide();
    };

    Popup.prototype.resize = function() {
      return Shadow.setSize();
    };

    Popup.setSize = function() {
      $(this.el).width(Browser.width);
      return $(this.el).height(Browser.height);
    };

    return Popup;

  })(Backbone.View);

}).call(this);
