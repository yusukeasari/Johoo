// Generated by CoffeeScript 1.10.0

/* 外部設定 初期化 */

(function() {
  var APP_FILE, BG_IMAGE_API, Browser, CAMP_TWITTER_TEXT, ClickOnlyButton, ControlPanel, ControlPanelModel, DOMAIN, DT, DeleteValueButton, INDI_TWITTER_TEXT, INIT_FILE, MID, Marker, PhotomosaicViewer, Point, Popup, Pyramid, SEARCH_API, SModel, SearchPanel, SearchResult, Shadow, SmallMap, TIMELINE_API, Tile, TileView, Tiles, Timeline, TimelineChild, TimelineChildView, UID, Utility, arrZoomSizeX, arrZoomSizeY, commentZoom, getSection, getUrlVars, initialZoomSizeArr, minBlockSize, minZoom, motifHeight, motifWidth, nowZoom, pinchTrigger, prevZoom, setInitData, tileHeight, tileImageDir, tileImageExtension, tileWidth, tlImageWidth, zoomImageDir, zoomSize,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  INIT_FILE = 'app/mid.json';

  DOMAIN = '';

  BG_IMAGE_API = '';

  APP_FILE = '';

  tileImageExtension = '.jpg';

  initialZoomSizeArr = {};

  tileWidth = 0;

  tileHeight = 0;

  motifWidth = 0;

  motifHeight = 0;

  SEARCH_API = '';

  TIMELINE_API = '';

  tileImageDir = '';

  zoomImageDir = '';

  INDI_TWITTER_TEXT = '';

  CAMP_TWITTER_TEXT = '';

  commentZoom = false;

  pinchTrigger = 15;

  minBlockSize = 1;

  minZoom = 1;

  tlImageWidth = 80;

  nowZoom = minZoom;

  prevZoom = minZoom;

  zoomSize = [];


  /*
   *
   * Class PhotomosaicViewer メインクラス
   * 表示別にクラスを分けるようにすること
   */

  PhotomosaicViewer = (function(superClass) {
    extend(PhotomosaicViewer, superClass);

    function PhotomosaicViewer() {
      this.setup = bind(this.setup, this);
      this.showSearchPanel = bind(this.showSearchPanel, this);
      this.backtomain = bind(this.backtomain, this);
      this.openPopupFromTimeline = bind(this.openPopupFromTimeline, this);
      this.openPopupFromPoint = bind(this.openPopupFromPoint, this);
      this.onOrient = bind(this.onOrient, this);
      this.initialize = bind(this.initialize, this);
      return PhotomosaicViewer.__super__.constructor.apply(this, arguments);
    }

    PhotomosaicViewer.prototype.el = '#Johoo';

    PhotomosaicViewer.prototype.initialize = function() {
      var css_href;
      this.uniBrowse = new Browser;
      console.log(initialZoomSizeArr);
      console.log(initialZoomSizeArr[Browser.device]);
      minZoom = initialZoomSizeArr[Browser.device];
      nowZoom = minZoom;
      prevZoom = minZoom + 1;
      css_href = 'css/johoo_' + Browser.device + '.css?' + Utility.getRandom();
      $('<link>').attr('href', css_href).attr('rel', 'stylesheet').load().appendTo($('head'));
      return this.setup("");
    };

    PhotomosaicViewer.prototype.onOrient = function() {
      Shadow.setSize();
      this.popup.resize();
      return $(this.el).show();
    };

    PhotomosaicViewer.prototype.openPopupFromPoint = function(_id) {
      var p;
      p = 0;
      return $.getJSON(SEARCH_API, {
        'id': _id
      }, (function(_this) {
        return function(data, status) {
          if (status && data !== null) {
            p = data[0][0].num;
            _this.popup.openPopupFromPoint(p);
            _this.marker.setResult(p);
            return _this.marker.render();
          }
        };
      })(this)).fail(function() {
        return console.log('error:' + status);
      });
    };

    PhotomosaicViewer.prototype.openPopupFromTimeline = function(_id) {
      this.popup.clear();
      this.searchPanel.hide();
      Pyramid.show();
      ControlPanel.show();
      nowZoom = arrZoomSizeX.length - 2;
      prevZoom = arrZoomSizeX.length - 3;
      this.marker.setResult(_id);
      return this.pyramid.moveToNum(_id);
    };

    PhotomosaicViewer.prototype.backtomain = function() {
      console.log('backtomain');
      this.searchPanel.hide();
      this.pyramid.closePopup();
      this.popup.closePopup();
      Pyramid.show();
      return ControlPanel.show();
    };

    PhotomosaicViewer.prototype.showSearchPanel = function() {
      this.popup.clear();
      this.searchPanel.show();
      Pyramid.hide();
      return ControlPanel.hide();
    };

    PhotomosaicViewer.prototype.setup = function(_init) {
      this.smodel = new SModel;
      this.shadow = new Shadow;
      this.pyramid = new Pyramid;
      this.popup = new Popup;
      this.searchPanel = new SearchPanel;
      this.controlPanel = new ControlPanel;
      this.marker = new Marker;
      if (Browser.device !== 'pc') {
        $(window).bind("orientationchange", (function(_this) {
          return function() {
            $(_this.el).hide();
            return setTimeout(function() {
              Browser.setup();
              return _this.onOrient();
            }, 1000);
          };
        })(this));
      } else {
        $(window).bind("resize", (function(_this) {
          return function() {
            $(_this.el).hide();
            return setTimeout(function() {
              Browser.setup();
              return _this.onOrient();
            }, 1000);
          };
        })(this));
      }
      this.searchPanel.bind('backtomain', (function(_this) {
        return function() {
          return _this.router.navigate("", {
            trigger: true
          });
        };
      })(this));
      this.popup.bind('backtomain', (function(_this) {
        return function() {
          return _this.router.navigate("", {
            trigger: true
          });
        };
      })(this));
      this.pyramid.bind('openPopupFromPoint', (function(_this) {
        return function(_p) {
          return $.getJSON(SEARCH_API, {
            'n': _p
          }, function(data, status) {
            var p;
            if (status && data !== null) {
              if (data[0].id !== void 0) {
                p = data[0].id;
                return _this.router.navigate("mosaic/" + p + "/", {
                  trigger: true
                });
              }
            }
          }).fail(function() {
            return console.log('error:' + status);
          });
        };
      })(this));
      this.controlPanel.bind('showSearchPanel', (function(_this) {
        return function() {
          return _this.router.navigate("search/", {
            trigger: true
          });
        };
      })(this));
      this.pyramid.bind('marker', (function(_this) {
        return function() {
          return _this.marker.render();
        };
      })(this));
      this.searchPanel.bind('startSearch', (function(_this) {
        return function() {
          return _this.marker.clear();
        };
      })(this));
      this.searchPanel.bind('onclicktimeline', (function(_this) {
        return function(d) {
          return _this.router.navigate("timeline/" + d + "/", {
            trigger: true
          });
        };
      })(this));
      this.pyramid.bind('moving', function(c) {});
      this.controlPanel.bind('change', (function(_this) {
        return function(h) {
          return _this.pyramid.update(h);
        };
      })(this));
      this.controlPanel.bind('onclickhomebutton', (function(_this) {
        return function() {
          nowZoom = minZoom;
          prevZoom = minZoom + 1;
          _this.pyramid.update();
          _this.pyramid.pyramidSetPositionToCenter();
          return setTimeout(function() {
            return _this.pyramid.update();
          }, 100);
        };
      })(this));
      Browser.setup();
      this.onOrient();
      this.controlPanel.trigger('onclickhomebutton');

      /*
       * Router振り分け
       */
      this.router = new Backbone.Router;
      this.router.route("mosaic/:id/", (function(_this) {
        return function(_id) {
          return _this.openPopupFromPoint(_id);
        };
      })(this));
      this.router.route("timeline/:id/", (function(_this) {
        return function(_id) {
          return _this.openPopupFromTimeline(_id);
        };
      })(this));
      this.router.route("search/", (function(_this) {
        return function(_p) {
          return _this.showSearchPanel();
        };
      })(this));
      this.router.route("", (function(_this) {
        return function() {
          return _this.backtomain();
        };
      })(this));
      return Backbone.history.start();
    };

    return PhotomosaicViewer;

  })(Backbone.View);

  SmallMap = (function(superClass) {
    extend(SmallMap, superClass);

    function SmallMap() {
      this.show = bind(this.show, this);
      this.hide = bind(this.hide, this);
      this.setCoords = bind(this.setCoords, this);
      this.setup = bind(this.setup, this);
      this.initialize = bind(this.initialize, this);
      return SmallMap.__super__.constructor.apply(this, arguments);
    }

    SmallMap.prototype.el = '';

    SmallMap.prototype.cursor = '#smallMapCursor';

    SmallMap.prototype.image = '#smallMapImage';

    SmallMap.prototype.m = 4;

    SmallMap.prototype.dm = 1;

    SmallMap.prototype.initialize = function(_el, _url) {
      this.el = _el;
      this.dm = Browser.device === 'smartphone' ? 1 : 2;
      this.m = this.m / this.dm;
      $(this.el).css({
        'overflow': 'hidden',
        'background-image': "url('" + _url + "')",
        'background-repeat': 'no-repeat',
        'background-size': zoomSize[1][0] / this.m + ' ' + zoomSize[1][1] / this.m
      });
      $('<div>').attr('id', 'smallMapCursor').appendTo($(this.el));
      return this.setup();
    };

    SmallMap.prototype.setup = function() {
      this.defaultRatio = [this.m / zoomSize[1][0], this.m / zoomSize[1][1]];
      $(this.cursor).css({
        width: Browser.width / this.m,
        position: 'relative',
        height: Browser.height / this.m,
        border: 'solid 1px #FF0000',
        zIndex: 40,
        left: 20,
        top: 50
      });
      $(this.el).css({
        top: Browser.height - (zoomSize[1][1] / this.m) - 10,
        width: zoomSize[1][0] / this.m,
        height: zoomSize[1][1] / this.m
      });
      return this.setCoords([Browser.width / 2 - zoomSize[nowZoom][0] / 2, Browser.height / 2 - zoomSize[nowZoom][1] / 2]);
    };

    SmallMap.prototype.setCoords = function(c) {
      return $(this.cursor).css({
        left: (c[0] / (this.m * (zoomSize[nowZoom][0] / zoomSize[1][0]))) * -1,
        top: (c[1] / (this.m * (zoomSize[nowZoom][1] / zoomSize[1][1]))) * -1,
        width: Browser.width / (this.m * (zoomSize[nowZoom][0] / zoomSize[1][0])),
        height: Browser.height / (this.m * (zoomSize[nowZoom][1] / zoomSize[1][1]))
      });
    };

    SmallMap.prototype.hide = function() {
      return $(this.el).hide();
    };

    SmallMap.prototype.show = function() {
      return $(this.el).show();
    };

    return SmallMap;

  })(Backbone.View);


  /**
   * Class SModel 現在はイベント管理のみ
   */

  SModel = (function(superClass) {
    extend(SModel, superClass);

    function SModel() {
      this.cEvent = bind(this.cEvent, this);
      this.removeEvent = bind(this.removeEvent, this);
      this.setEvent = bind(this.setEvent, this);
      return SModel.__super__.constructor.apply(this, arguments);
    }

    SModel.prototype.setEvent = function(_target, _eventname) {
      return this.bind(_eventname, (function(_this) {
        return function(_data) {
          return _this.cEvent(_eventname, _data);
        };
      })(this));
    };

    SModel.prototype.removeEvent = function(_e) {
      return this.unbind(_e);
    };

    SModel.prototype.cEvent = function(_event, _data) {
      return this.trigger(_event + "R", _data);
    };

    return SModel;

  })(Backbone.Model);

  SearchPanel = (function(superClass) {
    extend(SearchPanel, superClass);

    function SearchPanel() {
      this.clear = bind(this.clear, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      this.render = bind(this.render, this);
      this.error = bind(this.error, this);
      this.sendQuery = bind(this.sendQuery, this);
      this.onTapSubmitButton = bind(this.onTapSubmitButton, this);
      this.loading = bind(this.loading, this);
      this.bottom = bind(this.bottom, this);
      this.inputKeyup = bind(this.inputKeyup, this);
      this.setup = bind(this.setup, this);
      this.appendTimeline = bind(this.appendTimeline, this);
      this.onclicktimeline = bind(this.onclicktimeline, this);
      this.onBackToMain = bind(this.onBackToMain, this);
      this.searchpanelloaded = bind(this.searchpanelloaded, this);
      this.test = bind(this.test, this);
      this.initialize = bind(this.initialize, this);
      return SearchPanel.__super__.constructor.apply(this, arguments);
    }

    SearchPanel.prototype.el = '#SearchPanel';

    SearchPanel.prototype.searchQuery = '';

    SearchPanel.prototype.noMoreResult = false;

    SearchPanel.timeline = '';

    SearchPanel.prototype.initialize = function() {
      this.timeline = new Timeline;
      this.timeline.bind('test', this.test);
      this.timeline.bind('add', this.appendTimeline);
      this.timeline.bind('onclicktimeline', this.onclicktimeline);
      this.searchQuery = new SearchResult;
      this.loadingStatus = false;
      this.execSearched = false;
      return $(this.el).load("/assets/html/searchPanel.html", this.searchpanelloaded);
    };

    SearchPanel.prototype.test = function(a) {
      return console.log(a);
    };

    SearchPanel.prototype.searchpanelloaded = function(data, status) {
      if (status !== 'success') {
        alert("ERROR:検索パネルが読み込めません");
      } else {
        $(SearchPanel.el).html(data);
      }
      $('#backToMainButton').bind('click', this.onBackToMain);
      return this.setup();
    };

    SearchPanel.prototype.onBackToMain = function() {
      return this.trigger('backtomain');
    };

    SearchPanel.prototype.onclicktimeline = function(d) {
      this.clear();
      return this.trigger('onclicktimeline', d);
    };

    SearchPanel.prototype.appendTimeline = function(tile) {
      var timelineChildView;
      timelineChildView = new TimelineChildView({
        model: tile
      });
      return $("#searchResult").append(timelineChildView.render().el);
    };

    SearchPanel.prototype.setup = function() {
      var deleteValueButtons;
      $('#searchSubmitButton').bind('click', this.onTapSubmitButton);
      deleteValueButtons = [];
      $('span.delig').each(function(i, o) {
        return deleteValueButtons.push(new DeleteValueButton($(this)));
      });
      $('input[type=text]').each(function(i, o) {
        console.log(this, o, i);
        return $(this).bind('keyup', this.inputKeyup);
      });
      return $(this.el).bind('bottom', this.bottom);
    };

    SearchPanel.prototype.inputKeyup = function(e) {
      alert(e.keyCode);
      if (e.keyCode === 13) {
        this.onTapSubmitButton();
        return $(o).blur();
      }
    };

    SearchPanel.prototype.bottom = function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.sendQuery();
        };
      })(this), 1500);
    };

    SearchPanel.prototype.loading = function(bool) {
      if (bool) {
        $('#loadingAnimation').html('');
        $('#loadingAnimation').append('<img src="img/loadingAnimation.gif">');
        $('#loadingAnimation').height(48);
        return this.loadingStatus = bool;
      } else {
        $('#loadingAnimation').html('');
        if (this.noMoreResult !== true) {
          $('#loadingAnimation').append('<span style="font-size:24px;margin:auto;vertical-align: middle;">タップして続きを見る</span>');
          $('#loadingAnimation').height(48);
          $('#loadingAnimation').bind('click', (function(_this) {
            return function() {
              _this.loading(true);
              $(_this.el).trigger('bottom');
              return $('#loadingAnimation').unbind();
            };
          })(this));
        } else {
          $('#loadingAnimation').height(0);
        }
        return this.loadingStatus = bool;
      }
    };

    SearchPanel.prototype.onTapSubmitButton = function() {
      $('#searchResultError').html('');
      this.noMoreResult = false;
      this.execSearched = true;
      this.clear();
      this.searchQuery.resetPageCount();
      this.sendQuery();
      return this.trigger('startSearch');
    };

    SearchPanel.prototype.sendQuery = function() {
      var query;
      query = '';
      this.searchQuery.unbind();
      this.searchQuery.bind('return', (function(_this) {
        return function(result) {
          return _this.render(result);
        };
      })(this));
      this.searchQuery.bind('error', (function(_this) {
        return function() {
          return _this.error;
        };
      })(this));
      if ($('#SearchPanelInnerContents #id').val() !== void 0) {
        query += 'id=' + $('#SearchPanelInnerContents #id').val() + '&';
      }
      if ($('#SearchPanelInnerContents #b1').val() !== void 0) {
        query += 'b1=' + $('#SearchPanelInnerContents #b1').val() + '&';
      }
      if ($('#SearchPanelInnerContents #b2').val() !== void 0) {
        query += 'b2=' + $('#SearchPanelInnerContents #b2').val() + '&';
      }
      if ($('#SearchPanelInnerContents #b3').val() !== void 0) {
        query += 'b3=' + $('#SearchPanelInnerContents #b3').val() + '&';
      }
      if (query !== '') {
        query.slice(0, -1);
      }
      return this.searchQuery.sendQuery(query);
    };

    SearchPanel.prototype.error = function(t) {
      this.noMoreResult = true;
      return $('#searchResultError').html(t);
    };

    SearchPanel.prototype.render = function(result) {
      var ERROR, TOTAL, item, j, len, tlChild;
      ERROR = result[1][0].ERROR;
      switch (ERROR) {
        case 'TOOMUCHRESULT':
          this.error('<br />検索結果が100件を超えました。<br />条件を指定しなおしてください。');
          break;
        case 'NOTFOUND':
          this.error('<br />検索にヒットしませんでした。');
          break;
        case 'NOWORD':
          this.error('<br />検索条件を指定してください。');
          break;
        default:
          TOTAL = result[1][1].TOTAL;
          result = result[0];
          $('#searchResultError').html(TOTAL + '件ヒットしました。');
          if (result.length < 10) {
            this.noMoreResult = true;
          }
          if (result !== "") {
            for (j = 0, len = result.length; j < len; j++) {
              item = result[j];
              tlChild = new TimelineChild;
              tlChild.set({
                data: item
              });
              this.timeline.add(tlChild);
            }
          } else {
            alert("「" + value + "」では見つかりませんでした。");
          }
      }
      return this.loading(false);
    };

    SearchPanel.prototype.show = function() {
      if ($('#searchSubmitButton')[0] !== void 0) {
        this.clear();
        Shadow.show();
        $(this.el).show();
        $('input[type=tel]').each((function(_this) {
          return function() {
            return $(_this).focus();
          };
        })(this));
        $('#loadingAnimation').show();
        return $('#loadingAnimation').height(0);
      } else {
        return setTimeout((function(_this) {
          return function() {
            return _this.show();
          };
        })(this), 100);
      }
    };

    SearchPanel.prototype.hide = function() {
      this.execSearched = false;
      this.loadingStatus = false;
      $('#loadingAnimation').hide();
      $('#loadingAnimation').html('');
      $('#loadingAnimation').height(0);
      $('#searchResultError').html('');
      Shadow.hide();
      return $(this.el).hide();
    };

    SearchPanel.prototype.clear = function() {
      this.execSearched = false;
      $('#loadingAnimation').unbind();
      $('#loadingAnimation').html('');
      return this.timeline.clear();
    };

    return SearchPanel;

  })(Backbone.View);

  DeleteValueButton = (function(superClass) {
    extend(DeleteValueButton, superClass);

    function DeleteValueButton() {
      this.initialize = bind(this.initialize, this);
      return DeleteValueButton.__super__.constructor.apply(this, arguments);
    }

    DeleteValueButton.prototype.el = '';

    DeleteValueButton.prototype.button = '';

    DeleteValueButton.prototype.initialize = function(_el) {
      this.el = _el;
      $('<span>').attr('id', this.el.children('input').attr('id') + 'DelButton').appendTo(this.el);
      $('#' + this.el.children('input').attr('id') + 'DelButton').css({
        'position': 'relative',
        'height': '22px',
        'width': '22px',
        'top': '2px',
        'right': '25px',
        'background-image': 'url(img/delval.png)',
        'cursor': 'pointer',
        'display': 'inline-block',
        'backgroundRepeat': 'no-repeat',
        'backgroundPosition': 'center'
      });
      this.el.children('input').bind('keyup', (function(_this) {
        return function() {
          if (_this.el.children('input').val() === '') {
            return $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
              'opacity': 0
            });
          } else {
            return $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
              'opacity': 1
            });
          }
        };
      })(this));
      $('#' + this.el.children('input').attr('id') + 'DelButton').bind('click', (function(_this) {
        return function() {
          _this.el.children('input').val('');
          $('#' + _this.el.children('input').attr('id') + 'DelButton').css({
            'opacity': 0
          });
          return $('#' + _this.el.children('input').attr('id') + 'DelButton').focus();
        };
      })(this));
      return $('#' + this.el.children('input').attr('id') + 'DelButton').css({
        'opacity': 0
      });
    };

    return DeleteValueButton;

  })(Backbone.View);

  Timeline = (function(superClass) {
    extend(Timeline, superClass);

    function Timeline() {
      this.clear = bind(this.clear, this);
      return Timeline.__super__.constructor.apply(this, arguments);
    }

    Timeline.prototype.model = TimelineChild;

    Timeline.prototype.clear = function() {
      return this.each(function(tlChild) {
        return tlChild.clear();
      });
    };

    return Timeline;

  })(Backbone.Collection);

  TimelineChild = (function(superClass) {
    extend(TimelineChild, superClass);

    function TimelineChild() {
      this.clear = bind(this.clear, this);
      this.initialize = bind(this.initialize, this);
      return TimelineChild.__super__.constructor.apply(this, arguments);
    }

    TimelineChild.prototype.defaults = {
      data: ''
    };

    TimelineChild.prototype.initialize = function() {
      return this.bind('onclicktimeline', this.onclicktimeline);
    };

    TimelineChild.prototype.clear = function() {
      this.unbind;
      this.destroy;
      return this.view.unrender();
    };

    return TimelineChild;

  })(Backbone.Model);

  TimelineChildView = (function(superClass) {
    extend(TimelineChildView, superClass);

    function TimelineChildView() {
      this.onclicks = bind(this.onclicks, this);
      this.unrender = bind(this.unrender, this);
      this.render = bind(this.render, this);
      this.initialize = bind(this.initialize, this);
      return TimelineChildView.__super__.constructor.apply(this, arguments);
    }

    TimelineChildView.prototype.tagName = 'div';

    TimelineChildView.prototype.data = '';

    TimelineChildView.prototype.events = {
      "click": "onclicks"
    };

    TimelineChildView.prototype.initialize = function() {
      return this.model.view = this;
    };

    TimelineChildView.prototype.render = function() {
      var item, tl;
      item = this.model.get('data');
      this.data = item;
      tl = $(this.el).attr('class', 'timelineChild').attr('id', 'timelineChild' + item.id);
      $('<img />').attr('class', 'tlImg').attr('width', tlImageWidth).attr('src', zoomImageDir + item.img + tileImageExtension).load().appendTo(tl);
      $('<div>').attr('class', 'tlTitle').html(item.b1).appendTo(tl);
      $('<br />').appendTo(tl);
      $('<div>').attr('class', 'tlMsg').html(item.b2).appendTo(tl);
      $('<br />').attr('class', 'timelineBR').appendTo(tl);
      return this;
    };

    TimelineChildView.prototype.unrender = function() {
      $(this.el).remove();
      return $(this.el).unbind();
    };

    TimelineChildView.prototype.onclicks = function() {
      return this.model.trigger('onclicktimeline', this.data.num);
    };

    return TimelineChildView;

  })(Backbone.View);

  SearchResult = (function(superClass) {
    extend(SearchResult, superClass);

    function SearchResult() {
      this.nextPage = bind(this.nextPage, this);
      this.resetPageCount = bind(this.resetPageCount, this);
      this.queryResult = bind(this.queryResult, this);
      this.sendQuery = bind(this.sendQuery, this);
      return SearchResult.__super__.constructor.apply(this, arguments);
    }

    SearchResult.prototype.page = 1;

    SearchResult.prototype.linePerPage = 30;

    SearchResult.prototype.sendQuery = function(query) {
      var pageQuery;
      if (query !== '') {
        pageQuery = '&page=' + this.page;
      } else {
        pageQuery = 'page=' + this.page;
      }
      return $.ajax(SEARCH_API, {
        type: "GET",
        data: query + pageQuery,
        dataType: "json",
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this.trigger('error');
          };
        })(this),
        success: (function(_this) {
          return function(data) {
            _this.nextPage();
            return _this.queryResult(data);
          };
        })(this)
      });
    };

    SearchResult.prototype.queryResult = function(result) {
      return this.trigger('return', result);
    };

    SearchResult.prototype.resetPageCount = function() {
      return this.page = 1;
    };

    SearchResult.prototype.nextPage = function() {
      return this.page++;
    };

    return SearchResult;

  })(Backbone.View);


  /**
   * Class Browser 環境設定関連
   * ブラウザチェック、それにあわせた描画領域の設定、アドレスバーを隠す等
   * 完成したらちゃんと書く
   */

  Browser = (function(superClass) {
    extend(Browser, superClass);

    function Browser() {
      return Browser.__super__.constructor.apply(this, arguments);
    }

    Browser.device = '';

    Browser.bname = '';

    Browser.orientation = '';

    Browser.os = '';

    Browser.width = 0;

    Browser.height = 0;

    Browser.orient = 0;

    Browser.displayFix = 0;

    Browser.browserNameList = [
      {
        "name": 'chrome'
      }, {
        "name": 'safari'
      }, {
        "name": 'firefox'
      }, {
        "name": 'androidbrowser'
      }, {
        "name": 'opera'
      }
    ];

    Browser.prototype.initialize = function() {
      return Browser.setup();
    };

    Browser.setup = function() {
      Browser.orientation = Math.abs(window.orientation === 90) ? "h" : "v";
      if (navigator.userAgent.match(/iPhone/i || navigator.userAgent.match(/iPod/i))) {
        Browser.device = 'iphone';
      } else if (navigator.userAgent.match(/iPad/i)) {
        Browser.device = 'ipad';
      } else if (navigator.userAgent.match(/Android/i && navigator.userAgent.match(/Mobile/i))) {
        Browser.device = 'androidphone';
      } else if (navigator.userAgent.match(/Android/i)) {
        Browser.device = 'androidtablet';
      } else {
        Browser.device = 'pc';
      }
      Browser.width = $(window).width();
      Browser.height = $(window).height();
      $('#Pyramid').width(Browser.width);
      $('#Pyramid').height(Browser.height);
      return Browser.hideAddressBar();
    };

    Browser.tests = function(_var) {
      var b, j, len, ref;
      ref = Browser.browserNameList;
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        console.log(_var);
        if (_var.toLowerCase().match(new RegExp(b.name))) {
          return b.name;
        }
      }
    };

    Browser.hideAddressBar = function() {
      if (Browser.getOS() === 'ios') {
        return setTimeout(scrollTo, 100, 0, 1);
      }
    };

    Browser.getDevice = function() {
      return Browser.device;
    };

    Browser.getOS = function() {
      return Browser.os;
    };

    return Browser;

  })(Backbone.View);

  Utility = (function() {
    function Utility() {}

    Utility.type = (function() {
      var classToType, j, len, name, ref;
      classToType = {};
      ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      return function(obj) {
        var strType;
        strType = Object.prototype.toString.call(obj);
        return classToType[strType] || "object";
      };
    })();

    Utility.getDiagonal = function(_x, _y) {
      if (_x > 0 && _y > 0) {
        return Math.sqrt(Math.pow(_x, 2) + Math.pow(_y, 2));
      } else {
        return false;
      }
    };

    Utility.getRandom = function() {
      return Math.floor(Math.random() * 10000);
    };

    Utility.upperCase = function(str) {
      return str.replace(/[a-z]/g, function(ch) {
        return String.fromCharCode(ch.charCodeAt(0) & ~32);
      });
    };

    return Utility;

  })();


  /*
   * Class Pyramidクラス
   */

  Pyramid = (function(superClass) {
    extend(Pyramid, superClass);

    function Pyramid() {
      this.closePopup = bind(this.closePopup, this);
      this.getPyramidPos = bind(this.getPyramidPos, this);
      this.pyramidSetPositionToCenter = bind(this.pyramidSetPositionToCenter, this);
      this.appendTile = bind(this.appendTile, this);
      this.moveToZoomOutPos = bind(this.moveToZoomOutPos, this);
      this.moveToZoomInPos = bind(this.moveToZoomInPos, this);
      this.moveToPinchZoomPos = bind(this.moveToPinchZoomPos, this);
      this.moveToNum = bind(this.moveToNum, this);
      this.update = bind(this.update, this);
      this.render = bind(this.render, this);
      this.checkActiveTile = bind(this.checkActiveTile, this);
      this.getNumFromPoint = bind(this.getNumFromPoint, this);
      this.isOnTiles = bind(this.isOnTiles, this);
      this.onGestureEnd = bind(this.onGestureEnd, this);
      this.onGestureMove = bind(this.onGestureMove, this);
      this.onGestureStart = bind(this.onGestureStart, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onMouseUp = bind(this.onMouseUp, this);
      this.onMouseDown = bind(this.onMouseDown, this);
      return Pyramid.__super__.constructor.apply(this, arguments);
    }

    Pyramid.outerel = '#Pyramid';

    Pyramid.prototype.el = "#Tiles";

    Pyramid.prototype.searchHit = '';


    /*
    初期化メソッド
     */

    Pyramid.prototype.initialize = function() {
      var hasTapEvent;
      hasTapEvent = (function(_this) {
        return function() {
          var div;
          div = document.createElement('div');
          div.setAttribute('ontouchstart', 'return');
          return typeof div.ontouchstart === 'function';
        };
      })(this);
      if (Browser.device !== 'pc') {
        $(this.el).bind('touchstart', this.onMouseDown);
        $(this.el).bind('touchend', this.onMouseUp);
        $(this.el).bind('touchmove', this.onMouseMove);
        $(this.el).bind('gesturestart', this.onGestureStart);
        $(this.el).bind('gesturechange', this.onGestureMove);
        $(this.el).bind('gestureend', this.onGestureEnd);
      } else {
        $(this.el).bind('mousedown', this.onMouseDown);
        $(this.el).bind('mouseup', this.onMouseUp);
        $(this.el).bind('mousemove', this.onMouseMove);
      }
      this.dragging = false;
      this.tiles = new Tiles;
      this.tiles.bind('add', this.appendTile);
      $(this.el).css({
        'cursor': '-moz-grab'
      });
      $(this.el).css({
        'background-image': "url('" + BG_IMAGE_API + "')",
        'background-size': 'contain'
      });
      this.update();
      return this.pyramidSetPositionToCenter();
    };

    Pyramid.show = function() {
      return $(this.outerel).show();
    };

    Pyramid.hide = function() {
      return $(this.outerel).hide();
    };


    /*
    マウスイベント関連メソッド群
     */

    Pyramid.prototype.onMouseDown = function(e) {
      var cords;
      cords = Point.getPoint(e);
      Point.lock(e);
      if (Point.isLock() === false) {
        $(this.el).css({
          transform: "scale(1)"
        });
        e.preventDefault();
        this.dragging = true;
        if (Utility.type(cords[0]) !== 'array') {
          $(this.el).css({
            'cursor': '-moz-grab'
          });
          this.dragStartX = cords[0];
          this.dragStartY = cords[1];
          this.dragStartLeft = $(this.el).position().left;
          this.dragStartTop = $(this.el).position().top;
          this.dragStartPyramidX = this.getPyramidPos()[0];
          return this.dragStartPyramidY = this.getPyramidPos()[1];
        } else {
          $(this.el).css({
            'cursor': '-moz-grab'
          });
          this.dragStartX = cords[0][0] / 2 + cords[1][0] / 2;
          this.dragStartY = cords[0][1] / 2 + cords[1][1] / 2;
          this.dragStartLeft = $(this.el).position().left;
          this.dragStartTop = $(this.el).position().top;
          this.dragStartPyramidX = this.getPyramidPos()[0];
          return this.dragStartPyramidY = this.getPyramidPos()[1];
        }
      }

      /*
      else if Utility.type(cords[0]) is 'array'
        $(@el).css {'cursor':'-moz-grab'}
        @pinchinStartCenterX = (cords[0][0]+cords[1][0])/2
        @pinchinStartCenterY = (cords[0][1]+cords[1][1])/2
      
        @pinchinStart = cords
       */
    };

    Pyramid.prototype.onMouseUp = function(e) {
      var cords, cordx, cordy;
      cords = Point.getPoint(e);
      if (cords !== void 0 && Point.isLock() === false) {
        $(this.el).css({
          transform: "scale(1)"
        });
        e.preventDefault();
        this.dragging = false;
        $(this.el).css({
          'cursor': ''
        });
        cordx = Utility.type(cords[0]) !== 'array' ? cords[0] : cords[0][0];
        cordy = Utility.type(cords[1]) !== 'array' ? cords[1] : cords[0][1];
        if (this.isSingleTap(this.dragStartX, cordx) && this.isSingleTap(this.dragStartY, cordy)) {
          if (!Shadow.isShow() && nowZoom > 3) {
            $(this.el).unbind('touchend', this.onMouseUp);
            return this.trigger('openPopupFromPoint', this.getNumFromPoint([cords[0], cords[1]]));
          }
        } else if (this.isSingleTap(this.dragStartX, cordx) && this.isSingleTap(this.dragStartY, cordy) && this.isOnTiles([cords[0][0], cords[0][1]])) {
          if (!Shadow.isShow() && nowZoom > 3) {
            $(this.el).unbind('touchend', this.onMouseUp);
            return this.trigger('openPopupFromPoint', this.getNumFromPoint([cords[0][0], cords[0][1]]));
          }
        } else {
          return this.update();
        }
      }
    };

    Pyramid.prototype.onMouseMove = function(e) {
      var cords;
      cords = Point.getPoint(e);
      if (cords !== void 0 && Point.isLock() === false) {
        e.preventDefault();
        if (Utility.type(cords[0]) === "number" && this.dragging === true) {
          $(this.el).css({
            'left': this.dragStartPyramidX + (this.getMousePos(e)[0] - this.dragStartX),
            'top': this.dragStartPyramidY + (this.getMousePos(e)[1] - this.dragStartY)
          });
          return this.trigger('moving', [this.dragStartPyramidX + (this.getMousePos(e)[0] - this.dragStartX), this.dragStartPyramidY + (this.getMousePos(e)[1] - this.dragStartY)]);
        }
      }
    };

    Pyramid.prototype.onGestureStart = function(e) {
      if (Point.isLock() === false) {
        return $(this.el).css({
          transform: "scale(1)"
        });
      }
    };

    Pyramid.prototype.onGestureMove = function(e) {
      var dx, dy, localX, localY;
      if (Point.isLock() === false) {
        localX = this.dragStartX - this.dragStartLeft;
        localY = this.dragStartY - this.dragStartTop;
        dx = (zoomSize[nowZoom][0] - (zoomSize[nowZoom][0] * e.originalEvent.scale)) / 2;
        dx = (dx / e.originalEvent.scale) + (zoomSize[nowZoom][0] - localX);
        dy = (zoomSize[nowZoom][1] - (zoomSize[nowZoom][1] * e.originalEvent.scale)) / 2;
        dy = (dy / e.originalEvent.scale) + (zoomSize[nowZoom][1] - localY);
        return $(this.el).css({
          transform: "scale(" + e.originalEvent.scale + ") translate(" + dx + "px," + dy + "px)",
          left: (zoomSize[nowZoom][0] - localX) * -1 + this.dragStartLeft,
          top: (zoomSize[nowZoom][1] - localY) * -1 + this.dragStartTop
        });
      }
    };

    Pyramid.prototype.onGestureEnd = function(e) {
      var cnt, item, j, k, len, len1;
      if (Point.isLock() === false) {
        $(this.el).css({
          left: this.dragStartLeft,
          top: this.dragStartTop,
          transform: "scale(1)"
        });
        cnt = 0;
        if (e.originalEvent.scale > 1) {
          for (j = 0, len = zoomSize.length; j < len; j++) {
            item = zoomSize[j];
            if (zoomSize[nowZoom][0] * e.originalEvent.scale > item[0] && item[0] !== "") {

            } else if (item[0] !== void 0) {
              break;
            }
            cnt++;
          }
        } else {
          for (k = 0, len1 = zoomSize.length; k < len1; k++) {
            item = zoomSize[k];
            if (zoomSize[nowZoom][0] * e.originalEvent.scale < item[0]) {
              break;
            }
            cnt++;
          }
        }
        if (nowZoom !== cnt && cnt < zoomSize.length) {
          prevZoom = nowZoom;
          nowZoom = cnt;
          return this.update('pinchZoom');
        } else if (cnt > zoomSize.length - 1) {
          prevZoom = nowZoom;
          nowZoom = zoomSize.length - 2;
          return this.update('pinchZoom');
        }
      }
    };

    Pyramid.prototype.zoomIn = function(_z) {
      var rate;
      rate = Math.floor(_z / 2);
      if (nowZoom < zoomSize.length - 1) {
        prevZoom = nowZoom;
        if (nowZoom + rate < zoomSize.length - 1) {
          return nowZoom = nowZoom + rate;
        } else {
          return nowZoom = zoomSize.length - 1;
        }
      }
    };

    Pyramid.prototype.zoomOut = function(_z) {
      var rate;
      _z = (_z - 1) * 10;
      rate = Math.floor(_z / 2);
      if (nowZoom > minZoom) {
        prevZoom = nowZoom;
        if (nowZoom - rate > minZoom) {
          return nowZoom = minZoom;
        } else {
          return nowZoom = nowZoom + rate;
        }
      }
    };

    Pyramid.prototype.isOnTiles = function(p) {
      if (p[0] >= this.getPyramidPos()[0] && p[1] >= this.getPyramidPos()[1] && p[0] <= zoomSize[nowZoom][0] + this.getPyramidPos()[0] && p[1] <= parseInt(zoomSize[nowZoom][1]) + this.getPyramidPos()[1]) {
        return true;
      } else {
        return false;
      }
    };

    Pyramid.prototype.isSingleTap = function(_a, _b) {
      if (_a + 3 > _b && _b > _a - 3) {
        return true;
      } else {
        return false;
      }
    };

    Pyramid.prototype.getNumFromPoint = function(p) {
      var xb, yb;
      xb = Math.floor((p[0] - this.getPyramidPos()[0]) / arrZoomSizeX[nowZoom]);
      yb = Math.round((p[1] - this.getPyramidPos()[1] + (arrZoomSizeX[nowZoom] / 2)) / arrZoomSizeY[nowZoom]);
      yb = yb === 0 || yb === 1 ? 0 : yb - 1;
      xb++;
      return motifWidth * yb + xb;
    };


    /**
     * 描画範囲調査メソッド
     * もっとスマートに出来たらなぁといつも思う
     */

    Pyramid.prototype.checkActiveTile = function() {
      var displayAreaEndX, displayAreaEndY, displayAreaStartX, displayAreaStartY, loadEndX, loadEndY, loadStartX, loadStartY;
      displayAreaStartX = this.getPyramidPos()[0] > 0 && Browser.width - Math.abs(this.getPyramidPos()[0]) > 0 ? 0 : Math.abs(this.getPyramidPos()[0]);
      displayAreaStartY = this.getPyramidPos()[1] > 0 && Browser.height - Math.abs(this.getPyramidPos()[1]) > 0 ? 0 : Math.abs(this.getPyramidPos()[1]);
      displayAreaEndX = this.getPyramidPos()[0] + zoomSize[nowZoom][0] > $('#Pyramid').width() ? $('#Pyramid').width() - this.getPyramidPos()[0] : zoomSize[nowZoom][0];
      displayAreaEndY = this.getPyramidPos()[1] + zoomSize[nowZoom][1] > $('#Pyramid').height() ? $('#Pyramid').height() - this.getPyramidPos()[1] : zoomSize[nowZoom][1];
      if (displayAreaEndX <= 0) {
        displayAreaEndX = 0;
      }
      if (displayAreaEndY <= 0) {
        displayAreaEndY = 0;
      }
      loadStartX = Math.floor(displayAreaStartX / tileWidth);
      loadStartY = Math.floor(displayAreaStartY / tileHeight);
      loadEndX = Math.floor(displayAreaEndX / tileWidth === Math.floor(zoomSize[nowZoom][0] / tileWidth)) ? Math.floor(displayAreaEndX / tileWidth) - 1 : Math.floor(displayAreaEndX / tileWidth);
      loadEndY = Math.floor(displayAreaEndY / tileHeight === Math.floor(zoomSize[nowZoom][1] / tileHeight)) ? Math.floor(displayAreaEndY / tileHeight) - 1 : Math.floor(displayAreaEndY / tileHeight);
      return [loadStartX, loadStartY, loadEndX, loadEndY];
    };


    /**
     * 描画メソッド
     * @param {startX} Number
     * @param {startY} Number
     * @param {endX} Number
     * @param {endY} Number
     */

    Pyramid.prototype.render = function(t) {
      var tile, x, x2, y, y2;
      x = t[0];
      y = t[1];
      x2 = t[2];
      y2 = t[3];
      this.tiles.removeAllTiles();
      while (y <= t[3]) {
        while (x <= t[2]) {
          if (!this.tiles.isSameTile(nowZoom, x, y)) {
            tile = new Tile;
            tile.set({
              x: x,
              y: y,
              z: nowZoom,
              display: true
            });
            this.tiles.add(tile);
          }
          x++;
        }
        y++;
        x = t[0];
      }
      y = t[1];
      return this.trigger('marker');
    };


    /**
     * イベントコールバック用
     */

    Pyramid.prototype.update = function(h) {
      switch (h) {
        case 'zoomIn':
          this.moveToZoomInPos();
          break;
        case 'zoomOut':
          this.moveToZoomOutPos();
          break;
        case 'pinchZoom':
          this.moveToPinchZoomPos();
          break;
      }
      $(this.el).width(zoomSize[nowZoom][0]);
      $(this.el).height(zoomSize[nowZoom][1]);
      return this.render(this.checkActiveTile());
    };


    /**
     * Pyramidを指定numにあわせて移動させるメソッド
     */

    Pyramid.prototype.moveToNum = function(d) {
      var tx, ty;
      if (d % motifWidth === 0) {
        tx = motifWidth * arrZoomSizeX[nowZoom] * -1;
        ty = Math.floor((d / motifWidth) - 1) * arrZoomSizeX[nowZoom] * -1;
      } else {
        tx = d % motifWidth * arrZoomSizeX[nowZoom] * -1;
        ty = Math.floor(d / motifWidth) * arrZoomSizeY[nowZoom] * -1;
      }
      $(this.el).css({
        left: (Browser.width / 2) + tx + arrZoomSizeX[nowZoom] / 2,
        top: (Browser.height / 2) + ty - arrZoomSizeY[nowZoom] / 2
      });
      setTimeout((function(_this) {
        return function() {
          return _this.update('');
        };
      })(this), 500);
      return this.trigger('moving', [(Browser.width / 2) + tx + arrZoomSizeX[nowZoom] / 2, (Browser.height / 2) + ty - arrZoomSizeY[nowZoom] / 2]);
    };

    Pyramid.prototype.moveToPinchZoomPos = function() {
      if (this.dragStartTop !== void 0 && this.dragStartLeft !== void 0) {
        $(this.el).css({
          left: this.dragStartLeft - ((this.dragStartX - this.dragStartLeft) * (Math.pow(2, nowZoom - prevZoom) - 1)),
          top: this.dragStartTop - ((this.dragStartY - this.dragStartTop) * (Math.pow(2, nowZoom - prevZoom) - 1))
        });
        return this.trigger('moving', [$(this.el).position().left, $(this.el).position().top]);
      }
    };

    Pyramid.prototype.moveToZoomInPos = function() {
      var newPyramidPos, pyramidPos;
      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (nowZoom === zoomSize.length - 1 && commentZoom === true) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] * 2, pyramidPos[1] * 2);
      }
      $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
      return this.trigger('moving', [newPyramidPos[0], newPyramidPos[1]]);
    };

    Pyramid.prototype.moveToZoomOutPos = function() {
      var newPyramidPos, pyramidPos;
      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (prevZoom !== 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[1] / 2);
      } else if (prevZoom === 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[1] / 2);
      }
      $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
      return this.trigger('moving', [newPyramidPos[0], newPyramidPos[1]]);
    };


    /**
     * 座標コンバーター
     */

    Pyramid.prototype.convertToGrobalCenterPos = function(_x, _y) {
      var prevPyramidHeight, prevPyramidWidth, x, y;
      if (nowZoom !== 1 || prevZoom === zoomSize.length - 1) {
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      } else {
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      }
      x = (_x + prevPyramidWidth / 2) - Browser.width / 2;
      y = (_y + prevPyramidHeight / 2) - Browser.height / 2;
      return [x, y];
    };


    /**
     * 座標コンバーター2
     */

    Pyramid.prototype.convertToLocalCenterPos = function(_x, _y) {
      var nowPyramidHeight, nowPyramidWidth, x, y;
      nowPyramidWidth = zoomSize[nowZoom][0];
      nowPyramidHeight = zoomSize[nowZoom][1];
      x = _x - nowPyramidWidth / 2 + Browser.width / 2;
      y = _y - nowPyramidHeight / 2 + Browser.height / 2;
      return [x, y];
    };


    /*
     * addイベントのコールバックメソッド
     * 原則としてcollectionへbindする事
     * @param {tile} Tile
     */

    Pyramid.prototype.appendTile = function(tile) {
      var tileView;
      tileView = new TileView({
        model: tile
      });
      return $(this.el).append(tileView.render().el);
    };


    /*
    Pyramid位置操作メソッド群
     */

    Pyramid.prototype.pyramidSetPositionToCenter = function() {
      $(this.el).css({
        left: Browser.width / 2 - zoomSize[nowZoom][0] / 2,
        top: Browser.height / 2 - zoomSize[nowZoom][1] / 2
      });
      return this.trigger('moving', [Browser.width / 2 - zoomSize[nowZoom][0] / 2, Browser.height / 2 - zoomSize[nowZoom][1] / 2]);
    };


    /*
     * 位置取得メソッド群
     * 基本はreturnする簡単なお仕事
     * @param {e} Event
     */

    Pyramid.prototype.getMousePos = function(e) {
      var cords;
      cords = Point.getPoint(e);
      return [cords[0], cords[1]];
    };

    Pyramid.prototype.getPyramidPos = function() {
      return [$(this.el).position().left, $(this.el).position().top];
    };

    Pyramid.prototype.closePopup = function() {
      return $(this.el).bind('touchend', this.onMouseUp);
    };

    return Pyramid;

  })(Backbone.View);

  Marker = (function(superClass) {
    extend(Marker, superClass);

    function Marker() {
      this.render = bind(this.render, this);
      this.setResult = bind(this.setResult, this);
      this.clear = bind(this.clear, this);
      return Marker.__super__.constructor.apply(this, arguments);
    }

    Marker.prototype.result = '';

    Marker.prototype.clear = function() {
      this.result = '';
      return $('#Marker').remove();
    };

    Marker.prototype.setResult = function(num) {
      return this.result = num;
    };

    Marker.prototype.render = function() {
      var tx, ty, weight;
      if (this.result !== '') {
        $('#Marker').remove();
        tx = (this.result % motifWidth - 1) * arrZoomSizeX[nowZoom];
        ty = Math.floor(this.result / motifWidth) * arrZoomSizeY[nowZoom];
        if (this.result % motifWidth === 0) {
          tx = (motifWidth - 1) * arrZoomSizeX[nowZoom];
          ty = Math.floor((this.result / motifWidth) - 1) * arrZoomSizeX[nowZoom];
        } else {
          tx = (this.result % motifWidth - 1) * arrZoomSizeY[nowZoom];
          ty = Math.floor(this.result / motifWidth) * arrZoomSizeY[nowZoom];
        }
        if (tx < 0) {
          tx = 0;
        }
        $('<div />').attr('id', 'Marker').appendTo($('#Tiles'));
        weight = Math.floor(nowZoom / 2) < 1 ? 1 : Math.floor(nowZoom / 2);
        $('#Marker').css({
          zIndex: 3000,
          width: arrZoomSizeX[nowZoom] - (2 * weight),
          height: arrZoomSizeY[nowZoom] - (2 * weight),
          left: tx,
          top: ty,
          border: 'solid ' + weight + 'px #FF0000',
          'background-color': 'rgba(255,0,0,0.4)'
        });
        return setTimeout((function(_this) {
          return function() {
            return _this.swap();
          };
        })(this), 1000);
      }
    };

    Marker.prototype.swap = function() {
      return $('#Marker').css({
        'zIndex': 3000
      });
    };

    return Marker;

  })(Backbone.View);


  /**
   * Tileクラス
   * Tile画像に必要な情報のみ保持するModelクラス
   * @param {x} Number
   * @param {y} Number
   * @param {z} Number
   * @param {display} Boolean
   */

  Tile = (function(superClass) {
    extend(Tile, superClass);

    function Tile() {
      this.clear = bind(this.clear, this);
      return Tile.__super__.constructor.apply(this, arguments);
    }

    Tile.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0,
      display: false
    };

    Tile.prototype.clear = function() {
      this.destroy;
      return this.view.unrender();
    };

    return Tile;

  })(Backbone.Model);


  /**
   * Class TileViewクラス Tile画像を描画したり削除する役割のみ
   */

  TileView = (function(superClass) {
    extend(TileView, superClass);

    function TileView() {
      this.unrender = bind(this.unrender, this);
      this.render = bind(this.render, this);
      return TileView.__super__.constructor.apply(this, arguments);
    }

    TileView.prototype.tagName = 'img';

    TileView.prototype.initialize = function() {
      return this.model.view = this;
    };

    TileView.prototype.render = function() {
      var url, x, y, z;
      x = this.model.get('x');
      y = this.model.get('y');
      z = this.model.get('z');
      url = ("" + tileImageDir + z + "/" + y + "/z" + z + "x" + x + "y" + y + tileImageExtension + "?") + Utility.getRandom();
      $(this.el).attr({
        id: 'z' + z + 'x' + x + 'y' + y,
        src: url
      }).css({
        'position': 'absolute',
        'left': x * tileWidth,
        'top': y * tileWidth
      }).load();
      return this;
    };

    TileView.prototype.loadTile = function() {};

    TileView.prototype.unrender = function() {
      return $(this.el).remove();
    };

    return TileView;

  })(Backbone.View);


  /**
   * Class Tiles Tileクラスを管理する役割。描画に関してのイベント管理とか。イベントの割り当ては原則、Pyramidクラスで行う
   */

  Tiles = (function(superClass) {
    extend(Tiles, superClass);

    function Tiles() {
      this.removeAllTiles = bind(this.removeAllTiles, this);
      this.setRemove = bind(this.setRemove, this);
      this.getNowVisibleList = bind(this.getNowVisibleList, this);
      this.isSameTile = bind(this.isSameTile, this);
      return Tiles.__super__.constructor.apply(this, arguments);
    }

    Tiles.prototype.model = Tile;

    Tiles.prototype.initialize = function() {};

    Tiles.prototype.isSameTile = function(_z, _x, _y) {
      var data, item, j, len, res;
      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      for (j = 0, len = data.length; j < len; j++) {
        item = data[j];
        if (((item.get('z')) + " " + (item.get('x')) + " " + (item.get('y'))) === (_z + " " + _x + " " + _y)) {
          res = true;
        } else {
          res = false;
        }
      }
      return res;
    };

    Tiles.prototype.getNowVisibleList = function() {
      var data;
      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      return data;
    };

    Tiles.prototype.setRemove = function() {
      var data;
      data = [];
      return this.each(function(tile) {
        return data.push(tile);
      });
    };

    Tiles.prototype.removeCheckedTiles = function() {
      var j, len, results, tile;
      results = [];
      for (j = 0, len = data.length; j < len; j++) {
        tile = data[j];
        if (tile.get('display' !== true)) {
          results.push(tile.clear());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Tiles.prototype.removeAllTiles = function() {
      return this.each(function(tile) {
        return tile.clear();
      });
    };

    return Tiles;

  })(Backbone.Collection);


  /**
   * Class ControlPanel コンパネに表示するボタンとか管理
   */

  ControlPanel = (function(superClass) {
    extend(ControlPanel, superClass);

    function ControlPanel() {
      this.onclickhomebutton = bind(this.onclickhomebutton, this);
      this.showSearchPanel = bind(this.showSearchPanel, this);
      this.zoomOut = bind(this.zoomOut, this);
      this.zoomIn = bind(this.zoomIn, this);
      this.initialize = bind(this.initialize, this);
      return ControlPanel.__super__.constructor.apply(this, arguments);
    }

    ControlPanel.el = '#ControlPanel';

    ControlPanel.prototype.initialize = function() {
      var showHomeButton, showSearchPanelButton, zoomInButton, zoomOutButton;
      zoomInButton = new ClickOnlyButton({
        'el': '#ZoomInButton'
      });
      zoomInButton.bind('change', this.zoomIn);
      zoomOutButton = new ClickOnlyButton({
        'el': '#ZoomOutButton'
      });
      zoomOutButton.bind('change', this.zoomOut);
      showSearchPanelButton = new ClickOnlyButton({
        'el': '#SearchPanelButton'
      });
      showSearchPanelButton.bind('change', this.showSearchPanel);
      showHomeButton = new ClickOnlyButton({
        'el': '#HomeButton'
      });
      return showHomeButton.bind('change', this.onclickhomebutton);
    };

    ControlPanel.prototype.zoomIn = function() {
      if (nowZoom < zoomSize.length - 1) {
        prevZoom = nowZoom;
        nowZoom++;
        return this.trigger('change', 'zoomIn');
      }
    };

    ControlPanel.prototype.zoomOut = function() {
      if (nowZoom > minZoom) {
        prevZoom = nowZoom;
        nowZoom--;
        return this.trigger('change', 'zoomOut');
      }
    };

    ControlPanel.prototype.showSearchPanel = function() {
      return this.trigger('showSearchPanel');
    };

    ControlPanel.prototype.onclickhomebutton = function() {
      return this.trigger('onclickhomebutton');
    };

    ControlPanel.show = function() {
      return $(ControlPanel.el).show();
    };

    ControlPanel.hide = function() {
      return $(ControlPanel.el).hide();
    };

    return ControlPanel;

  })(Backbone.View);

  ControlPanelModel = (function(superClass) {
    extend(ControlPanelModel, superClass);

    function ControlPanelModel() {
      return ControlPanelModel.__super__.constructor.apply(this, arguments);
    }

    return ControlPanelModel;

  })(Backbone.Model);


  /**
   * Class ClickOnlyButton 汎用ボタンクラス。クラス名はちょっと考えたい。
   * @param div 描画用DOM
   */

  ClickOnlyButton = (function(superClass) {
    extend(ClickOnlyButton, superClass);

    function ClickOnlyButton() {
      this.destroy = bind(this.destroy, this);
      this.onMouseUp = bind(this.onMouseUp, this);
      this.initialize = bind(this.initialize, this);
      return ClickOnlyButton.__super__.constructor.apply(this, arguments);
    }

    ClickOnlyButton.prototype.el = '';

    ClickOnlyButton.prototype.initialize = function(_obj) {
      var el;
      el = _obj.el;
      $(this.el).unbind();
      if (Browser.device !== 'pc') {
        return $(this.el).bind("touchend", this.onMouseUp);
      } else {
        return $(this.el).bind("mouseup", this.onMouseUp);
      }
    };

    ClickOnlyButton.prototype.onMouseUp = function(e) {
      e.preventDefault();
      return this.trigger('change');
    };

    ClickOnlyButton.prototype.destroy = function() {
      $(this.el).unbind();
      return $(this.el).remove();
    };

    return ClickOnlyButton;

  })(Backbone.View);


  /**
   * Class Point イベントオブジェクトを受け取って座標を返すクラス。デバイス・ブラウザ問わずが基本思想
   * @param event マウスイベントオブジェクト
   */

  Point = (function() {
    function Point() {}

    Point.locked = false;

    Point.plock = 0;

    Point.lock = function(e) {
      if (e.originalEvent.touches !== void 0) {
        if (e.originalEvent.touches.length > 2 && Point.plock < 3) {
          Point.locked = true;
        } else {
          Point.locked = false;
        }
        return Point.plock = e.originalEvent.touches.length;
      } else {
        Point.locked = false;
        return Point.plock = 1;
      }
    };

    Point.isLock = function() {
      return Point.locked;
    };

    Point.getPoint = function(e) {
      var cords, ftime, hx, hy, item, j, len, lx, ly, ref;
      if (Point.isTouch(e)) {
        if (e.originalEvent.touches.length === 1) {
          return [e.originalEvent.touches[0].pageX, e.originalEvent.touches[0].pageY];
        } else if (e.originalEvent.touches.length > 1) {
          cords = [];
          ftime = false;
          ref = e.originalEvent.touches;
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            if (item.pageX > hx && ftime === true) {
              hx = item.pageX;
            } else if (ftime === false) {
              hx = item.pageX;
            }
            if (item.pageX < lx && ftime === true) {
              lx = item.pageX;
            } else if (ftime === false) {
              lx = item.pageX;
            }
            if (item.pageY > hy && ftime === true) {
              hy = item.pageY;
            } else if (ftime === false) {
              hy = item.pageY;
            }
            if (item.pageY < ly && ftime === true) {
              ly = item.pageY;
            } else if (ftime === false) {
              ly = item.pageY;
            }
            ftime = true;
          }
          cords.push([hx, hy]);
          cords.push([lx, ly]);
          return cords;
        } else {
          return [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY];
        }
      } else {
        return [e.pageX, e.pageY];
      }
    };

    Point.isTouch = function(e) {
      return e.originalEvent.touches;
    };

    return Point;

  })();

  Shadow = (function(superClass) {
    extend(Shadow, superClass);

    function Shadow() {
      return Shadow.__super__.constructor.apply(this, arguments);
    }

    Shadow.el = '#Shadow';

    Shadow.show = function() {
      Shadow.setSize();
      return $(Shadow.el).show();
    };

    Shadow.hide = function() {
      Shadow.setSize();
      return $(Shadow.el).hide();
    };

    Shadow.prototype.resize = function() {
      return Shadow.setSize();
    };

    Shadow.setSize = function() {
      $(Shadow.el).width(Browser.width);
      return $(Shadow.el).height(Browser.height);
    };

    Shadow.setFullSize = function(_h) {
      $(Shadow.el).width(Browser.width);
      if (Browser.height > _h + 20) {
        return $(Shadow.el).height(Browser.height);
      } else {
        return $(Shadow.el).height($(Shadow.el).height(_h + 20));
      }
    };

    Shadow.isShow = function() {
      var res;
      res = $(Shadow.el).css('display');
      if (res === 'none') {
        return false;
      } else {
        return true;
      }
    };

    return Shadow;

  })(Backbone.View);

  Popup = (function(superClass) {
    extend(Popup, superClass);

    function Popup() {
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      this.closeButtonAction = bind(this.closeButtonAction, this);
      this.setDataToView = bind(this.setDataToView, this);
      this.render = bind(this.render, this);
      this.closePopup = bind(this.closePopup, this);
      this.clear = bind(this.clear, this);
      this.openPopupFromPoint = bind(this.openPopupFromPoint, this);
      this.popupHtmlLoaded = bind(this.popupHtmlLoaded, this);
      this.initialize = bind(this.initialize, this);
      return Popup.__super__.constructor.apply(this, arguments);
    }

    Popup.prototype.el = '#Popup';

    Popup.prototype.initialize = function() {
      return $(this.el).load("/assets/html/popup.html", this.popupHtmlLoaded);
    };

    Popup.prototype.popupHtmlLoaded = function(data, status) {
      if (status !== 'success') {
        return console.log("ERROR:Popuphtmlが読み込めません");
      } else {
        return $(this.el).html(data);
      }
    };

    Popup.prototype.openPopupFromPoint = function(p) {
      Shadow.show();
      return $.getJSON(SEARCH_API, {
        'n': p
      }, (function(_this) {
        return function(data, status) {
          if (status && data !== null) {
            return _this.render(data[0]);
          } else {
            return _this.hide();
          }
        };
      })(this)).fail(function() {
        console.log("Popup.fali");
        return this.hide();
      });
    };

    Popup.prototype.clear = function() {
      if ($(this.el).html() !== '') {
        $("#Popup #closeButton").unbind();
        return $("#Popup #loadImage").attr('src', '');
      }
    };

    Popup.prototype.closePopup = function(e) {
      this.clear();
      return this.hide();
    };

    Popup.prototype.render = function(data) {
      return $("#Popup #loadImage").css('margin-top', 5).attr('src', zoomImageDir + data.img + tileImageExtension).load((function(_this) {
        return function() {
          _this.setDataToView(data);
          _this.snsButtonAction(data.id);
          _this.closeButtonAction();
          return _this.show();
        };
      })(this)).error((function(_this) {
        return function() {
          return _this.closePopup();
        };
      })(this));
    };

    Popup.prototype.setDataToView = function(data) {
      var item, results;
      console.log("Popup.setDataToView");
      $("#Popup .snsFacebookButton").attr('href', "https://www.facebook.com/sharer.php?u=" + encodeURIComponent("" + DOMAIN + APP_FILE + "#mosaic/" + data.id + "/"));
      $("#Popup .snsTwitterButton").attr('href', "https://twitter.com/intent/tweet?url=" + encodeURIComponent("" + DOMAIN + APP_FILE + "#mosaic/" + data.id + "/") + "&text=" + encodeURIComponent("" + INDI_TWITTER_TEXT));
      results = [];
      for (item in data) {
        results.push($("#Popup .popup" + Utility.upperCase(item) + "Style").text(data[item]));
      }
      return results;
    };

    Popup.prototype.snsButtonAction = function(_id) {
      $("#Popup .snsFacebookButton").unbind();
      $("#Popup .snsFacebookButton").bind("touchend", function(e) {
        return _gaq.push(['_trackPageview', "/photomosaic/sp/fb/" + _id]);
      });
      $("#Popup .snsTwitterButton").unbind();
      $("#Popup .snsTwitterButton").bind("touchend", function(e) {
        return _gaq.push(['_trackPageview', "/photomosaic/sp/tw/" + _id]);
      });
      $("#Popup .snsLineButton").unbind();
      return $("#Popup .snsLineButton").bind("touchend", function(e) {
        return _gaq.push(['_trackPageview', "/photomosaic/sp/line/" + _id]);
      });
    };

    Popup.prototype.closeButtonAction = function() {
      if (Browser.device !== 'pc') {
        return $("#Popup #closeButton").bind("touchend", (function(_this) {
          return function(e) {
            _this.closePopup(e);
            return $("#Popup #closeButton").unbind();
          };
        })(this));
      } else {
        return $("#Popup #closeButton").bind("mouseup", (function(_this) {
          return function(e) {
            _this.closePopup(e);
            return $("#Popup #closeButton").unbind();
          };
        })(this));
      }
    };

    Popup.prototype.show = function() {
      $(this.el).show();
      Shadow.show();
      Shadow.setFullSize($(this.el).height());
      return $("#Popup #loadImage").unbind();
    };

    Popup.prototype.hide = function() {
      console.log('Popup hide');
      this.trigger("backtomain");
      Shadow.setSize();
      $(this.el).hide();
      return Shadow.hide();
    };

    Popup.prototype.resize = function() {
      return Shadow.setSize();
    };

    Popup.setSize = function() {
      $(Popup.el).width(Browser.width);
      return $(Popup.el).height(Browser.height);
    };

    return Popup;

  })(Backbone.View);

  getSection = function(url, callback) {
    var req;
    req = $.getJSON(url);
    return req.success(function(data) {
      return callback(data);
    });
  };

  getUrlVars = (function(_this) {
    return function(_id) {
      var item, j, key, keySearch, len, params, val, vars;
      vars = {};
      params = location.search.substring(1).split('&');
      for (j = 0, len = params.length; j < len; j++) {
        item = params[j];
        keySearch = item.search(/\=/);
        key = '';
        if (keySearch !== -1) {
          key = item.slice(0, keySearch);
        }
        val = item.slice(item.indexOf('=', 0) + 1);
        if (key !== '') {
          vars[key] = decodeURI(val);
        }
      }
      return vars[_id];
    };
  })(this);

  UID = getUrlVars('uid');

  DT = getUrlVars('dt') ? getUrlVars('dt') : 0;

  MID = getUrlVars('mid');

  if (DT !== 0) {
    motifWidth = (DT === "2" || DT === "4" ? 45 : 50);
    motifHeight = (DT === "2" || DT === "4" ? 45 : 50);
    arrZoomSizeX = [0, 4, 8, 16, 32, 64];
    arrZoomSizeY = [0, 4, 8, 16, 32, 64];
    tileImageDir = "swfData/mosaic/" + UID + "/web/";
    zoomImageDir = "img/data/" + DT + "/orig_images_220/";
  }

  setInitData = function(data) {
    var i, j, len, pmviewer, x;
    DOMAIN = data.domain;
    APP_FILE = data.app;
    tileWidth = data.tileWidth;
    tileHeight = data.tileHeight;
    motifWidth = data.motifWidth;
    motifHeight = data.motifHeight;
    arrZoomSizeX = data.arrZoomSize;
    arrZoomSizeY = data.arrZoomSize;
    initialZoomSizeArr = data.initialZoomSizeArr;
    tileImageDir = data.blockimgPath;
    zoomImageDir = data.zoomImagePath;
    SEARCH_API = data.searchApi;
    BG_IMAGE_API = data.bgImageApi;
    INDI_TWITTER_TEXT = data.indiTwitterText;
    CAMP_TWITTER_TEXT = data.campTwitterText;
    i = 0;
    for (j = 0, len = arrZoomSizeX.length; j < len; j++) {
      x = arrZoomSizeX[j];
      zoomSize.push([motifWidth * minBlockSize * arrZoomSizeX[i], motifHeight * minBlockSize * arrZoomSizeY[i]]);
      i++;
    }
    return pmviewer = new PhotomosaicViewer;
  };

  $(window).load(function() {
    return getSection((INIT_FILE + "?") + Utility.getRandom(), setInitData);
  });

}).call(this);
