// Generated by CoffeeScript 1.6.2
(function() {
  var Browser, ClickOnlyButton, ControlPanel, ControlPanelModel, PhotomosaicViewer, Point, Popup, Pyramid, SearchPanel, Shadow, Tile, TileView, Tiles, arrZoomSizeX, arrZoomSizeY, blockHeight, blockWidth, minBlockSize, minZoom, motifHeight, motifWidth, nowZoom, prevZoom, searchPhp, tileHeight, tileImageDir, tileImageExtension, tileWidth, zoomImageDir, zoomSize, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  tileWidth = 256;

  tileHeight = 256;

  blockWidth = 20;

  blockHeight = 20;

  minZoom = 1;

  motifWidth = 56;

  motifHeight = 60;

  searchPhp = 'swfData/search.php';

  tileImageDir = 'swfData/web/';

  zoomImageDir = 'swfData/blockimg/';

  tileImageExtension = '.jpg';

  minBlockSize = 1;

  arrZoomSizeX = [13, 13, 26, 52, 104, 208];

  arrZoomSizeY = [9, 9, 18, 36, 72, 144];

  nowZoom = minZoom;

  prevZoom = minZoom;

  zoomSize = [[], [motifWidth * minBlockSize * arrZoomSizeX[1], motifHeight * minBlockSize * arrZoomSizeY[1]], [motifWidth * minBlockSize * arrZoomSizeX[2], motifHeight * minBlockSize * arrZoomSizeY[2]], [motifWidth * minBlockSize * arrZoomSizeX[3], motifHeight * minBlockSize * arrZoomSizeY[3]], [motifWidth * minBlockSize * arrZoomSizeX[4], motifHeight * minBlockSize * arrZoomSizeY[4]], [motifWidth * minBlockSize * arrZoomSizeX[5], motifHeight * minBlockSize * arrZoomSizeY[5]]];

  $(function() {
    var pmviewer;

    return pmviewer = new PhotomosaicViewer;
  });

  /**
   * Class PhotomosaicViewer メインクラス
   * 表示別にクラスを分けるようにすること
  */


  PhotomosaicViewer = (function(_super) {
    __extends(PhotomosaicViewer, _super);

    function PhotomosaicViewer() {
      _ref = PhotomosaicViewer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PhotomosaicViewer.prototype.initialize = function() {
      var _this = this;

      _.bindAll(this);
      this.uniBrowse = new Browser;
      this.shadow = new Shadow;
      this.pyramid = new Pyramid;
      this.popup = new Popup;
      this.searchPanel = new SearchPanel;
      this.controlPanel = new ControlPanel;
      this.pyramid.bind('openFromPoint', function(p) {
        return _this.popup.openFromPoint(p);
      });
      this.controlPanel.bind('change', function(h) {
        return _this.pyramid.update(h);
      });
      return this.controlPanel.bind('showSearchPanel', function() {
        SearchPanel.show();
        Pyramid.hide();
        return ControlPanel.hide();
      });
    };

    return PhotomosaicViewer;

  })(Backbone.View);

  SearchPanel = (function(_super) {
    __extends(SearchPanel, _super);

    function SearchPanel() {
      _ref1 = SearchPanel.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SearchPanel.el = '#SearchPanel';

    SearchPanel.prototype.initialize = function() {
      var _this = this;

      _.bindAll(this);
      return $(this.el).load("searchPanel.html", null, function(data, status) {
        if (status !== 'success') {
          return alert("ERROR:検索パネルが読み込めません");
        } else {
          return $(SearchPanel.el).html(data);
        }
      });
    };

    SearchPanel.show = function() {
      Shadow.show();
      return $(SearchPanel.el).show();
    };

    SearchPanel.hide = function() {
      Shadow.hide();
      return $(SearchPanel.el).hide();
    };

    return SearchPanel;

  }).call(this, Backbone.View);

  /**
   * Class Browser 環境設定関連
   * ブラウザチェック、それにあわせた描画領域の設定、アドレスバーを隠す等
   * 完成したらちゃんと書く
  */


  Browser = (function(_super) {
    __extends(Browser, _super);

    function Browser() {
      _ref2 = Browser.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Browser.device = '';

    Browser.os = '';

    Browser.width = 0;

    Browser.height = 0;

    Browser.orient = 0;

    Browser.prototype.initialize = function() {
      _.bindAll(this);
      $(window).bind("orientationchange resize", this.setup);
      return this.setup();
    };

    Browser.prototype.setup = function() {
      if (navigator.userAgent.match(/iPhone/i || navigator.userAgent.match(/iPod/i))) {
        Browser.device = 'smartphone';
        Browser.os = 'ios';
        Browser.version = '';
        Browser.width = Math.abs(window.orientation !== 90) ? screen.width : screen.height;
        Browser.height = Math.abs(window.orientation !== 90) ? screen.height - 64 : screen.width - 52;
      } else if (navigator.userAgent.match(/iPad/i)) {
        Browser.device = 'tablet';
        Browser.os = 'ios';
        Browser.version = '';
      } else if (navigator.userAgent.match(/Android/i)) {
        Browser.device = 'smartphone';
        Browser.os = 'android';
        Browser.version = '';
        Browser.width = screen.width;
        Browser.height = screen.height;
      } else {
        Browser.device = 'pc';
        Browser.width = screen.width / 2;
        Browser.height = screen.height / 2;
      }
      $('#Pyramid').width(Browser.width);
      $('#Pyramid').height(Browser.height);
      return this.hideAddressBar();
    };

    Browser.prototype.hideAddressBar = function() {
      if (Browser.getOS() === 'ios') {
        return setTimeout(scrollTo, 100, 0, 1);
      } else if (Browser.getOS() === 'android') {
        return window.scrollTo(0, 1);
      }
    };

    Browser.getDevice = function() {
      return Browser.device;
    };

    Browser.getOS = function() {
      return Browser.os;
    };

    return Browser;

  }).call(this, Backbone.View);

  /**
   * Class Pyramidクラス
  */


  Pyramid = (function(_super) {
    __extends(Pyramid, _super);

    function Pyramid() {
      _ref3 = Pyramid.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Pyramid.prototype.el = "#Tiles";

    Pyramid.outerel = '#Pyramid';

    /*
    	初期化メソッド
    */


    Pyramid.prototype.initialize = function() {
      _.bindAll(this);
      if (Browser.device !== 'pc') {
        $(this.el).bind('touchstart', this.onMouseDown);
        $(this.el).bind('touchend', this.onMouseUp);
        $(this.el).bind('touchmove', this.onMouseMove);
      } else {
        $(this.el).bind('mousedown', this.onMouseDown);
        $(this.el).bind('mouseup', this.onMouseUp);
        $(this.el).bind('mousemove', this.onMouseMove);
      }
      $(this.el).flickable();
      this.dragging = false;
      this.tiles = new Tiles;
      this.tiles.bind('add', this.appendTile);
      this.tiles.bind('change', this.changeTile);
      $(this.el).css({
        'cursor': '-moz-grab'
      });
      this.update();
      return this.pyramidSetPositionToCenter();
    };

    Pyramid.show = function() {
      return $(this.outerel).show();
    };

    Pyramid.hide = function() {
      return $(this.outerel).hide();
    };

    /*
    	マウスイベント関連メソッド群
    */


    Pyramid.prototype.onMouseDown = function(e) {
      var cords;

      e.preventDefault();
      this.dragging = true;
      $(this.el).css({
        'cursor': '-moz-grab'
      });
      cords = Point.getPoint(e);
      this.dragStartX = cords[0];
      this.dragStartY = cords[1];
      this.dragStartPyramidX = this.getPyramidPos()[0];
      return this.dragStartPyramidY = this.getPyramidPos()[1];
    };

    Pyramid.prototype.onMouseUp = function(e) {
      var cords;

      e.preventDefault();
      this.dragging = false;
      $(this.el).css({
        'cursor': ''
      });
      cords = Point.getPoint(e);
      console.log('DEL:', Point.getPoint(e)[0]);
      if (this.dragStartX === cords[0] && this.dragStartY === cords[1] && this.isOnTiles([cords[0], cords[1]])) {
        console.log('CORDS:', cords[0], cords[1], this.getNumFromPoint(cords[0], cords[1]));
        if (!Shadow.isShow()) {
          this.trigger('openFromPoint', this.getNumFromPoint([cords[0], cords[1]]));
        }
      }
      return this.update();
    };

    Pyramid.prototype.onMouseMove = function(e) {
      e.preventDefault();
      if (this.dragging === true) {
        return $(this.el).css({
          'left': this.dragStartPyramidX + (this.getMousePos(e)[0] - this.dragStartX),
          'top': this.dragStartPyramidY + (this.getMousePos(e)[1] - this.dragStartY)
        });
      }
    };

    Pyramid.prototype.isOnTiles = function(p) {
      if (p[0] >= this.getPyramidPos()[0] && p[1] >= this.getPyramidPos()[1] && p[0] <= zoomSize[nowZoom][0] + this.getPyramidPos()[0] && p[1] <= parseInt(zoomSize[nowZoom][1]) + this.getPyramidPos()[1]) {
        return true;
      } else {
        return false;
      }
    };

    Pyramid.prototype.getNumFromPoint = function(p) {
      var xb, yb;

      console.log('P:::', p[0], this.getPyramidPos()[0], arrZoomSizeX[nowZoom]);
      console.log('P:::', p[1], this.getPyramidPos()[1], arrZoomSizeY[nowZoom]);
      xb = Math.floor((p[0] - this.getPyramidPos()[0]) / arrZoomSizeX[nowZoom]);
      yb = Math.round((p[1] - this.getPyramidPos()[1]) / arrZoomSizeY[nowZoom]);
      yb = yb === 0 || yb === 1 ? 0 : yb - 1;
      xb++;
      console.log(motifWidth, yb, xb);
      return motifWidth * yb + xb;
    };

    /**
    	 * 描画範囲調査メソッド
    	 * もっとスマートに出来たらなぁといつも思う
    */


    Pyramid.prototype.checkActiveTile = function() {
      var displayAreaEndX, displayAreaEndY, displayAreaStartX, displayAreaStartY, loadEndX, loadEndY, loadStartX, loadStartY;

      displayAreaStartX = this.getPyramidPos()[0] > 0 && Browser.width - Math.abs(this.getPyramidPos()[0]) > 0 ? 0 : Math.abs(this.getPyramidPos()[0]);
      displayAreaStartY = this.getPyramidPos()[1] > 0 && Browser.height - Math.abs(this.getPyramidPos()[1]) > 0 ? 0 : Math.abs(this.getPyramidPos()[1]);
      displayAreaEndX = this.getPyramidPos()[0] + zoomSize[nowZoom][0] > $('#Pyramid').width() ? $('#Pyramid').width() - this.getPyramidPos()[0] : zoomSize[nowZoom][0];
      displayAreaEndY = this.getPyramidPos()[1] + zoomSize[nowZoom][1] > $('#Pyramid').height() ? $('#Pyramid').height() - this.getPyramidPos()[1] : zoomSize[nowZoom][1];
      if (displayAreaEndX <= 0) {
        displayAreaEndX = 0;
      }
      if (displayAreaEndY <= 0) {
        displayAreaEndY = 0;
      }
      loadStartX = Math.floor(displayAreaStartX / tileWidth);
      loadStartY = Math.floor(displayAreaStartY / tileHeight);
      loadEndX = Math.floor(displayAreaEndX / tileWidth);
      loadEndY = Math.floor(displayAreaEndY / tileHeight);
      return [loadStartX, loadStartY, loadEndX, loadEndY];
    };

    /**
    	 * 描画メソッド
    	 * @param {startX} Number
    	 * @param {startY} Number
    	 * @param {endX} Number
    	 * @param {endY} Number
    */


    Pyramid.prototype.render = function(t) {
      var tile, x, x2, y, y2;

      x = t[0];
      y = t[1];
      x2 = t[2];
      y2 = t[3];
      this.tiles.removeAllTiles();
      while (y <= t[3]) {
        while (x <= t[2]) {
          if (!this.tiles.isSameTile(nowZoom, x, y)) {
            tile = new Tile;
            tile.set({
              x: x,
              y: y,
              z: nowZoom,
              display: true
            });
            this.tiles.add(tile);
          }
          x++;
        }
        y++;
        x = t[0];
      }
      return y = t[1];
    };

    /**
    	 * イベントコールバック用
    */


    Pyramid.prototype.update = function(h) {
      switch (h) {
        case 'zoomIn':
          this.moveToZoomInPos();
          break;
        case 'zoomOut':
          this.moveToZoomOutPos();
          break;
      }
      $(this.el).width(zoomSize[nowZoom][0]);
      $(this.el).height(zoomSize[nowZoom][1]);
      return this.render(this.checkActiveTile());
    };

    Pyramid.prototype.moveToZoomInPos = function() {
      var newPyramidPos, pyramidPos;

      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (nowZoom !== zoomSize.length - 1) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] * 2, pyramidPos[1] * 2);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      }
      return $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
    };

    Pyramid.prototype.moveToZoomOutPos = function() {
      var newPyramidPos, pyramidPos;

      pyramidPos = this.convertToGrobalCenterPos($(this.el).position().left, $(this.el).position().top);
      if (prevZoom !== 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[1] / 2);
      } else if (prevZoom === 8) {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0], pyramidPos[1]);
      } else {
        newPyramidPos = this.convertToLocalCenterPos(pyramidPos[0] / 2, pyramidPos[0] / 2);
      }
      return $(this.el).css({
        left: newPyramidPos[0],
        top: newPyramidPos[1]
      });
    };

    Pyramid.prototype.convertToGrobalCenterPos = function(_x, _y) {
      var prevPyramidHeight, prevPyramidWidth, x, y;

      if (nowZoom !== 1 || prevZoom === zoomSize.length - 1) {
        console.log("GROBAL");
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      } else {
        prevPyramidWidth = zoomSize[prevZoom][0];
        prevPyramidHeight = zoomSize[prevZoom][1];
      }
      x = (_x + prevPyramidWidth / 2) - Browser.width / 2;
      y = (_y + prevPyramidHeight / 2) - Browser.height / 2;
      return [x, y];
    };

    Pyramid.prototype.convertToLocalCenterPos = function(_x, _y) {
      var nowPyramidHeight, nowPyramidWidth, x, y;

      console.log(_x, _y);
      nowPyramidWidth = zoomSize[nowZoom][0];
      nowPyramidHeight = zoomSize[nowZoom][1];
      x = _x - nowPyramidWidth / 2 + Browser.width / 2;
      y = _y - nowPyramidHeight / 2 + Browser.height / 2;
      return [x, y];
    };

    /*
    	 * addイベントのコールバックメソッド
    	 * 原則としてcollectionへbindする事
    	 * @param {tile} Tile
    */


    Pyramid.prototype.appendTile = function(tile) {
      var tileView;

      tileView = new TileView({
        model: tile
      });
      return $(this.el).append(tileView.render().el);
    };

    /*
    	Pyramid位置操作メソッド群
    */


    Pyramid.prototype.pyramidSetPositionToCenter = function() {
      return $(this.el).css({
        left: Browser.width / 2 - zoomSize[nowZoom][0] / 2,
        top: Browser.height / 2 - zoomSize[nowZoom][1] / 2
      });
    };

    /*
    	 * 位置取得メソッド群
    	 * 基本はreturnする簡単なお仕事
    	 * @param {e} Event
    */


    Pyramid.prototype.getMousePos = function(e) {
      var cords;

      cords = Point.getPoint(e);
      return [cords[0], cords[1]];
    };

    Pyramid.prototype.getPyramidPos = function() {
      return [$(this.el).position().left, $(this.el).position().top];
    };

    return Pyramid;

  })(Backbone.View);

  /**
   * Tileクラス
   * Tile画像に必要な情報のみ保持するModelクラス
   * @param {x} Number
   * @param {y} Number
   * @param {z} Number
   * @param {display} Boolean
  */


  Tile = (function(_super) {
    __extends(Tile, _super);

    function Tile() {
      _ref4 = Tile.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Tile.prototype.defaults = {
      x: 0,
      y: 0,
      z: 0,
      display: false
    };

    Tile.prototype.clear = function() {
      this.destroy;
      return this.view.unrender();
    };

    return Tile;

  })(Backbone.Model);

  /**
   * Class TileViewクラス Tile画像を描画したり削除する役割のみ
  */


  TileView = (function(_super) {
    __extends(TileView, _super);

    function TileView() {
      this.unrender = __bind(this.unrender, this);
      this.render = __bind(this.render, this);      _ref5 = TileView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    TileView.prototype.tagName = 'img';

    TileView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.view = this;
    };

    TileView.prototype.render = function() {
      var url, x, y, z;

      x = this.model.get('x');
      y = this.model.get('y');
      z = this.model.get('z');
      url = tileImageDir + ("" + z + "/" + y + "/") + 'z' + z + 'x' + x + 'y' + y + tileImageExtension;
      $(this.el).attr({
        id: 'z' + z + 'x' + x + 'y' + y,
        src: url
      }).css({
        'position': 'absolute',
        'left': x * tileWidth,
        'top': y * tileWidth
      }).load();
      return this;
    };

    TileView.prototype.unrender = function() {
      return $(this.el).remove();
    };

    return TileView;

  })(Backbone.View);

  /**
   * Class Tiles Tileクラスを管理する役割。描画に関してのイベント管理とか。イベントの割り当ては原則、Pyramidクラスで行う
  */


  Tiles = (function(_super) {
    __extends(Tiles, _super);

    function Tiles() {
      _ref6 = Tiles.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Tiles.prototype.model = Tile;

    Tiles.prototype.initialize = function() {
      return _.bindAll(this);
    };

    Tiles.prototype.isSameTile = function(_z, _x, _y) {
      var data, item, res, _i, _len;

      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        if (("" + (item.get('z')) + " " + (item.get('x')) + " " + (item.get('y'))) === ("" + _z + " " + _x + " " + _y)) {
          res = true;
        } else {
          res = false;
        }
      }
      return res;
    };

    Tiles.prototype.getNowVisibleList = function() {
      var data;

      data = [];
      this.each(function(tile) {
        return data.push(tile);
      });
      return data;
    };

    Tiles.prototype.setRemove = function() {
      var data;

      data = [];
      return this.each(function(tile) {
        return data.push(tile);
      });
    };

    Tiles.prototype.removeCheckedTiles = function() {
      var tile, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        tile = data[_i];
        if (tile.get('display' !== true)) {
          _results.push(tile.clear());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Tiles.prototype.removeAllTiles = function() {
      return this.each(function(tile) {
        return tile.clear();
      });
    };

    return Tiles;

  })(Backbone.Collection);

  /**
   * Class ControlPanel コンパネに表示するボタンとか管理
  */


  ControlPanel = (function(_super) {
    __extends(ControlPanel, _super);

    function ControlPanel() {
      _ref7 = ControlPanel.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    ControlPanel.el = '#ControlPanel';

    ControlPanel.prototype.initialize = function() {
      var showSearchPanelButton, showTLPanelButton, zoomInButton, zoomOutButton;

      _.bindAll(this);
      zoomInButton = new ClickOnlyButton('#ZoomInButton');
      zoomInButton.bind('change', this.zoomIn);
      zoomOutButton = new ClickOnlyButton('#ZoomOutButton');
      zoomOutButton.bind('change', this.zoomOut);
      showSearchPanelButton = new ClickOnlyButton('#SearchPanelButton');
      showSearchPanelButton.bind('change', this.showSearchPanel);
      showTLPanelButton = new ClickOnlyButton('#TimelineButton');
      return showTLPanelButton.bind('change', this.showTLPanel);
    };

    ControlPanel.prototype.zoomIn = function() {
      if (nowZoom < zoomSize.length - 1) {
        prevZoom = nowZoom;
        nowZoom++;
        return this.trigger('change', 'zoomIn');
      }
    };

    ControlPanel.prototype.zoomOut = function() {
      if (nowZoom > minZoom) {
        prevZoom = nowZoom;
        nowZoom--;
        return this.trigger('change', 'zoomOut');
      }
    };

    ControlPanel.prototype.showSearchPanel = function() {
      return this.trigger('showSearchPanel');
    };

    ControlPanel.prototype.showTLPanel = function() {};

    ControlPanel.show = function() {
      return $(ControlPanel.el).show();
    };

    ControlPanel.hide = function() {
      return $(ControlPanel.el).hide();
    };

    return ControlPanel;

  }).call(this, Backbone.View);

  ControlPanelModel = (function(_super) {
    __extends(ControlPanelModel, _super);

    function ControlPanelModel() {
      _ref8 = ControlPanelModel.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return ControlPanelModel;

  })(Backbone.Model);

  /**
   * Class ClickOnlyButton 汎用ボタンクラス。クラス名はちょっと考えたい。
   * @param div 描画用DOM
  */


  ClickOnlyButton = (function(_super) {
    __extends(ClickOnlyButton, _super);

    function ClickOnlyButton() {
      _ref9 = ClickOnlyButton.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    ClickOnlyButton.prototype.el = '';

    ClickOnlyButton.prototype.initialize = function(_el) {
      _.bindAll(this);
      this.el = _el;
      return $(this.el).bind("mouseup touchend", this.onMouseUp);
    };

    ClickOnlyButton.prototype.onMouseUp = function(e) {
      e.preventDefault();
      return this.trigger('change');
    };

    ClickOnlyButton.prototype.destroy = function() {
      $(this.el).unbind();
      return $(this.el).remove();
    };

    return ClickOnlyButton;

  })(Backbone.View);

  /**
   * Class Point イベントオブジェクトを受け取って座標を返すクラス。デバイス・ブラウザ問わずが基本思想
   * @param event マウスイベントオブジェクト
  */


  Point = (function() {
    function Point() {}

    Point.getPoint = function(e) {
      var item, _i, _len, _ref10;

      if (Point.isTouch()) {
        if (e.originalEvent.changedTouches.length === 1) {
          console.log("SINGLE", e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY);
          return [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY];
        } else {
          console.log("MULTI");
          _ref10 = e.originalEvent.changedTouches;
          for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
            item = _ref10[_i];
            console.log(item.pageX, item.pageY);
            cords.push([item.pageX, item.pageY]);
          }
          return cords;
        }
      } else {
        return [e.pageX, e.pageY];
      }
    };

    Point.isTouch = function() {
      return 'ontouchstart' in window;
    };

    return Point;

  })();

  Shadow = (function(_super) {
    __extends(Shadow, _super);

    function Shadow() {
      _ref10 = Shadow.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Shadow.el = '#Shadow';

    Shadow.prototype.initialize = function() {
      return $(window).bind("load resize orientationchange", this.resize);
    };

    Shadow.show = function() {
      Shadow.setSize();
      return $(Shadow.el).show();
    };

    Shadow.hide = function() {
      Shadow.setSize();
      return $(Shadow.el).hide();
    };

    Shadow.prototype.resize = function() {
      return Shadow.setSize();
    };

    Shadow.setSize = function() {
      $(this.el).width(Browser.width);
      return $(this.el).height(Browser.height);
    };

    Shadow.isShow = function() {
      var res;

      res = $(Shadow.el).css('display');
      if (res === 'none') {
        return false;
      } else {
        return true;
      }
    };

    return Shadow;

  }).call(this, Backbone.View);

  Popup = (function(_super) {
    __extends(Popup, _super);

    function Popup() {
      _ref11 = Popup.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    Popup.el = '#Popup';

    Popup.prototype.initialize = function() {
      _.bindAll(this);
      return $(window).bind("resize orientationchange", this.resize);
    };

    Popup.prototype.openFromPoint = function(p) {
      return $.getJSON(searchPhp, {
        'n': p
      }, function(data, status) {
        if (status && data !== null) {
          return Popup.render(data[0]);
        }
      });
    };

    Popup.clear = function() {
      if ($(Popup.el).html() !== '') {
        $("#closeButton").unbind();
        return $(Popup.el).html('');
      }
    };

    Popup.closePopup = function(e) {
      if (e !== void 0) {
        e.stopPropagation();
        e.preventDefault();
      }
      Popup.clear();
      return Popup.hide();
    };

    Popup.render = function(data) {
      Popup.show();
      return $('<img />').css('margin-top', 5).attr('src', zoomImageDir + data.img + '.jpg').load(function() {
        $('<div />').attr('id', 'popupOuterText').appendTo($(Popup.el));
        $("#popupOuterText").css({
          'width': '80%',
          'margin': 'auto'
        });
        $('<p>').attr('class', 'popupB1Style').text(data.b1).appendTo($(Popup.el));
        $('<p>').attr('class', 'popupB2Style').text(data.b2).appendTo($(Popup.el));
        return $('<img>').attr('id', 'closeButton').attr('src', 'assets/buttons/close.png').load(function() {
          return Popup.onClick();
        }).appendTo($(Popup.el));
      }).error(function() {
        return Popup.closePopup();
      }).appendTo($(this.el));
    };

    Popup.onClick = function() {
      return $("#closeButton").bind("touchend mouseup", function(e) {
        e.stopPropagation();
        e.preventDefault();
        return Popup.closePopup();
      });
    };

    Popup.show = function() {
      Shadow.setSize();
      $(Popup.el).show();
      return Shadow.show();
    };

    Popup.hide = function() {
      Shadow.setSize();
      $(Popup.el).hide();
      return Shadow.hide();
    };

    Popup.prototype.resize = function() {
      return Shadow.setSize();
    };

    Popup.setSize = function() {
      $(this.el).width(Browser.width);
      return $(this.el).height(Browser.height);
    };

    Popup.prototype.resize = function() {};

    return Popup;

  }).call(this, Backbone.View);

}).call(this);
