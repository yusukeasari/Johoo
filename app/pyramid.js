// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Pyramid, PyramidModel, PyramidView, Tile, Tiles, blockHeight, blockWidth, nowZoom, pyramid, tileHeight, tileImageDir, tileImageExtension, tileWidth, tilesX, tilesY;
    tilesX = 3;
    tilesY = 4;
    tileWidth = 512;
    tileHeight = 512;
    blockWidth = 20;
    blockHeight = 20;
    nowZoom = 1;
    tileImageDir = 'swfData/';
    tileImageExtension = '.jpg';
    PyramidModel = (function(_super) {

      __extends(PyramidModel, _super);

      function PyramidModel() {
        return PyramidModel.__super__.constructor.apply(this, arguments);
      }

      PyramidModel.prototype.initialize = function() {
        return alert("PyramidModelRENDER");
      };

      return PyramidModel;

    })(Backbone.Model);
    PyramidView = (function(_super) {

      __extends(PyramidView, _super);

      function PyramidView() {
        return PyramidView.__super__.constructor.apply(this, arguments);
      }

      PyramidView.prototype.initialize = function() {
        var tiles;
        $('#pyramid').css({
          'background-color': '#CCCCCC',
          'width': 1000,
          'height': 600,
          'position': 'relative',
          'overflow': 'hidden',
          'border': '1px solid black'
        });
        $('<div />').attr('id', 'Tiles').css({
          'width': '100',
          'height': '100',
          'background-color': '#FF0000',
          'position': 'relative'
        }).appendTo($('#pyramid'));
        tiles = new Tiles;
        return $('#pyramid').append(tiles);
      };

      return PyramidView;

    })(Backbone.View);
    Tile = (function(_super) {

      __extends(Tile, _super);

      function Tile() {
        return Tile.__super__.constructor.apply(this, arguments);
      }

      Tile.prototype.initialize = function(x, y) {
        var url;
        url = tileImageDir + 'z' + nowZoom + 'x' + x + 'y' + y + tileImageExtension;
        return $('<img />').attr('id', 'z' + nowZoom + 'x' + x + 'y' + y).attr('src', url).css({
          'position': 'absolute',
          'left': x * tileWidth,
          'top': y * tileWidth
        }).appendTo($('#Tiles'));
      };

      Tile.prototype.remove = function() {};

      return Tile;

    })(Backbone.View);
    Tiles = (function(_super) {

      __extends(Tiles, _super);

      function Tiles() {
        return Tiles.__super__.constructor.apply(this, arguments);
      }

      Tiles.prototype.initialize = function() {
        var tile, x, y, _results;
        x = 0;
        y = 0;
        _results = [];
        while (y < tilesY) {
          while (x < tilesX) {
            tile = new Tile(x, y);
            x++;
          }
          y++;
          _results.push(x = 0);
        }
        return _results;
      };

      Tiles.prototype.method = function() {};

      return Tiles;

    })(Backbone.Collection);
    Pyramid = (function(_super) {

      __extends(Pyramid, _super);

      function Pyramid() {
        return Pyramid.__super__.constructor.apply(this, arguments);
      }

      Pyramid.prototype.initialize = function() {
        var model, view;
        model = new PyramidModel;
        return view = new PyramidView;
      };

      return Pyramid;

    })(Backbone.View);
    return pyramid = new Pyramid;
  });

}).call(this);
